#!/usr/bin/env badash
###########################################################################
# DO NOT EDIT! This script was auto-generated. To update this script, edit
# the file ~/dotfiles/script-gen/cpus, and run 'generate-scripts.sh'
###########################################################################
#0f5be27359930a5b995b1da79ff3db0d

COLOR_FG_RED='\033[0;31m'
COLOR_RESET='\033[0m'
echo_err ()
{
    echo -e "${COLOR_FG_RED}$@${COLOR_RESET}" 1>&2
}
requirement_check ()
{
    local cmd="$1";
    local how_to_install="$2";
    if [ ! $(command -v $cmd) ]; then
        echo_err "[ERROR] Command '$cmd' is required for this script, but not installed";
        echo_err "To install: $how_to_install";
        return 1;
    else
        return 0;
    fi
}
show_help_msg() {
  echo "cpus - Show the number of logical and physical CPUs on this machine"
  echo 'Usage: cpus [options]'
  echo ''
  echo 'Options:'
  echo '  -h               Show this help message'
}
while getopts ":h" opt
do
  case $opt in
    h)
      show_help_msg && exit 0
      ;;
    \?)
      echo_err "$0: invalid option '-$OPTARG'"
      exit 1
      ;;
    :)
      echo_err "$0: option '-$OPTARG' requires an argument"
      exit 1
      ;;
  esac
done
shift $((OPTIND-1))
combined_return=0
if [ "$(uname -s)" == "Darwin" ]; then
  requirement_check sysctl "search 'how to install sysctl/OSX'"
  combined_return=$(( combined_return + $? ))
fi
requirement_check wc "search 'how to install wc'"
combined_return=$(( combined_return + $? ))
if [ "$(uname -s)" == "Linux" ]; then
  requirement_check lscpu "search 'how to install lscpu/Linux'"
  combined_return=$(( combined_return + $? ))
fi
requirement_check egrep "search 'how to install egrep'"
combined_return=$(( combined_return + $? ))
requirement_check sort "search 'how to install sort'"
combined_return=$(( combined_return + $? ))
if [ "$combined_return" != 0 ]; then exit $combined_return; fi
if [ "$(uname -s)" == "Darwin" ]
then
  echo "logical CPUs:  $(sysctl -n hw.logicalcpu_max) max ($(sysctl -n hw.logicalcpu) available)"
  echo "physical CPUs: $(sysctl -n hw.physicalcpu_max) max ($(sysctl -n hw.physicalcpu) available)"
elif [ "$(uname -s)" == "Linux" ]
then
  echo "logical CPUs:  $(lscpu -p | egrep -v '^#' | wc -l)"
  echo "physical CPUs: $(lscpu -p | egrep -v '^#' | sort -u -t, -k 2,4 | wc -l)"
fi
