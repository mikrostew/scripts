#!/usr/bin/env badash
# shellcheck shell=bash

# [git] Merge main/master into current branch (Git Merge Main into Branch)

COLOR_FG_BOLD_BLUE='\033[1;34m'
COLOR_FG_RED='\033[0;31m'
COLOR_RESET='\033[0m'

current_git_branch ()
{
    git rev-parse --abbrev-ref HEAD
}
echo_err ()
{
    echo -e "${COLOR_FG_RED}$*${COLOR_RESET}" 1>&2
}
echo_info ()
{
    echo -e "${COLOR_FG_BOLD_BLUE}$*${COLOR_RESET}" 1>&2
}
in_git_repo ()
{
    git status > /dev/null && return 0 || echo_err "Not in git repo" && return 1
}
no_uncommitted_changes ()
{
    [ "$(git status --porcelain --untracked-files=no)" != "" ] && echo_err ">_<  You have uncommitted changes" && return 1 || return 0
}
not_on_git_branch ()
{
    [ "$(current_git_branch)" == "$1" ] && echo_err ">_<  Doesn't work on branch '$1'" && return 1 || return 0
}

if in_git_repo && no_uncommitted_changes
then
  # is the default branch main or master?
  # see https://stackoverflow.com/q/5167957
  if git show-ref --verify --quiet refs/heads/main
  then
    default_branch="main"
  elif git show-ref --verify --quiet refs/heads/master
  then
    default_branch="master"
  else
    echo_err "Error: default branch is not 'main' or 'master'"
    exit 1
  fi

  if not_on_git_branch "$default_branch"
  then
    # merge straight from origin, without updating local main/master
    if ! @wait-for-command git merge "origin/$default_branch"
    then
      echo_info "Merge failed"
      @wait-for-keypress 'Press any key to start resolving conflicts (or Ctrl-C to abort)... '
      gmt

      echo "To remove *.orig files leftover from conflicts, run 'grmorig'"
    fi
  else
    echo_err "Already on default branch '$default_branch'"
  fi
fi
