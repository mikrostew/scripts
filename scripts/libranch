#!/usr/bin/env badash
###########################################################################
# DO NOT EDIT! This script was auto-generated. To update this script, edit
# the file ~/dotfiles/script-gen/libranch, and run 'generate-scripts.sh'
###########################################################################
#218a3263a567a96b7b523d9a7564460e

COLOR_FG_GREEN='\033[0;32m'
COLOR_FG_RED='\033[0;31m'
COLOR_RESET='\033[0m'
current_git_branch ()
{
    echo "$(git rev-parse --abbrev-ref HEAD)"
}
do_cmd ()
{
    local cmd_args="";
    for arg in "$@";
    do
        case "$arg" in
            *\ *)
                cmd_args="$cmd_args \"$arg\""
            ;;
            *)
                cmd_args="$cmd_args $arg"
            ;;
        esac;
    done;
    echo -e "${COLOR_FG_GREEN}($cmd_args )${COLOR_RESET}" 1>&2;
    command "$@"
}
do_git ()
{
    do_cmd git "$@"
}
echo_err ()
{
    echo -e "${COLOR_FG_RED}$@${COLOR_RESET}" 1>&2
}
in_git_repo ()
{
    git status > /dev/null && return 0 || echo_err "Not in git repo" && return 1
}
on_git_branch ()
{
    [ "$(current_git_branch)" != "$1" ] && echo_err ">_<  Must be on branch '$1' for this" && return -1 || return 0
}
show_help_msg() {
  echo "libranch - Create a new branch that tracks origin/master (for LinkedIn workflow)"
  echo 'Usage: libranch [options] new_branch_name'
  echo ''
  echo 'Options:'
  echo '  -h                Show this help message'
  echo ''
  echo 'Arguments:'
  echo '  new_branch_name   Name of the new branch'
}
while getopts ":h" opt
do
  case $opt in
    h)
      show_help_msg && exit 0
      ;;
    \?)
      echo_err "$0: invalid option '-$OPTARG'"
      exit 1
      ;;
    :)
      echo_err "$0: option '-$OPTARG' requires an argument"
      exit 1
      ;;
  esac
done
shift $((OPTIND-1))
new_branch_name="${1:?Missing argument \'new_branch_name\'}"
if in_git_repo && on_git_branch 'master'
then
  do_git checkout -b "$new_branch_name" origin/master
fi
