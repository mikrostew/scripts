#!/usr/bin/env bash
###########################################################################
# DO NOT EDIT! This script was auto-generated. To update this script, edit
# the file script-gen/libranch, and run './generate-scripts.sh'
###########################################################################
#c2d9df27616a8b4583d8b72c7f2af7e0

COLOR_FG_GREEN='\033[0;32m'
COLOR_FG_RED='\033[0;31m'
COLOR_RESET='\033[0m'
current_git_branch ()
{
    echo "$(git rev-parse --abbrev-ref HEAD)"
}
do_cmd ()
{
    local cmd_args="";
    for arg in "$@";
    do
        case "$arg" in
            *\ *)
                cmd_args="$cmd_args \"$arg\""
            ;;
            *)
                cmd_args="$cmd_args $arg"
            ;;
        esac;
    done;
    echo -e "${COLOR_FG_GREEN}($cmd_args )${COLOR_RESET}" 1>&2;
    command "$@"
}
do_git ()
{
    do_cmd git "$@"
}
echo_err ()
{
    echo -e "${COLOR_FG_RED}$@${COLOR_RESET}" 1>&2
}
in_git_repo ()
{
    git status > /dev/null && return 0 || echo_err "Not in git repo" && return 1
}
on_git_branch ()
{
    [ "$(current_git_branch)" != "$1" ] && echo_err ">_<  Must be on branch '$1' for this" && return -1 || return 0
}
requirement_check ()
{
    local cmd="$1";
    local how_to_install="$2";
    if [ ! $(command -v $cmd) ]; then
        echo_err "[ERROR] Command '$cmd' is required for this script, but not installed";
        echo_err "To install: $how_to_install";
        return 1;
    else
        return 0;
    fi
}
combined_return=0
requirement_check git "search 'how to install git'"
combined_return=$(( combined_return + $? ))
if [ "$combined_return" != 0 ]; then exit $combined_return; fi
new_branch_name="$1"
if [ -z "$new_branch_name" ]
then
  echo_err "ERROR: Missing branch name"
  echo_err "Usage:"
  echo_err "  ${0##*/} <new-branch-name>"
fi
if in_git_repo && on_git_branch 'master'
then
  do_git checkout -b "$new_branch_name" origin/master
fi
