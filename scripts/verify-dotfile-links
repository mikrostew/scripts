#!/usr/bin/env badash

# colors
COLOR_FG_RED='\033[0;31m'
COLOR_RESET='\033[0m'

# helper functions
echo_err ()
{
    echo -e "${COLOR_FG_RED}$@${COLOR_RESET}" 1>&2
}

# help text
show_help_msg() {
  echo "verify-dotfile-links - Verify the links to the dotfiles haven't changed"
  echo 'Usage: verify-dotfile-links [options] [checkout_dir]'
  echo ''
  echo 'Options:'
  echo '  -h               Show this help message'
  echo ''
  echo 'Arguments:'
  echo '  checkout_dir     (optional) The directory where the repo is checked out (defaults to "$HOME/dotfiles")'
}

# argument parsing
while getopts ":h" opt
do
  case $opt in
    h)
      show_help_msg && exit 0
      ;;
    \?)
      echo_err "$0: invalid option '-$OPTARG'"
      exit 1
      ;;
    :)
      echo_err "$0: option '-$OPTARG' requires an argument"
      exit 1
      ;;
  esac
done
shift $((OPTIND-1))
checkout_dir="${1:-$HOME/dotfiles}"

# check dependent commands
@uses_cmds readlink

# use bash 4.x associative arrays
declare -A links

# vim
links[".vimrc"]=".vimrc"
links[".vim"]=".vim"

# bash
links[".bash_profile"]=".bash_profile"
links[".bashrc"]=".bashrc"

# inputrc
links[".inputrc"]=".inputrc"

# gitignore
links[".gitignore"]=".gitignore"

# tmux
links[".tmux.conf"]=".tmux.conf"

# bundler
links[".bundle"]=".bundle"

# rubocop
links[".rubocop.yml"]=".rubocop.yml"

# platform-specific
if @system_is_darwin?
then
  # ssh
  links[".ssh/config"]=".ssh-config-mac"
elif @system_is_linux?
then
  # ssh
  links[".ssh/config"]=".ssh-config-linux"
fi

# verify the links
for i in "${!links[@]}"
do
  if [ -L "$HOME/$i" ]
  then
    # symlink exists, check if it points to the right place
    link_target="$(readlink $HOME/$i)"
    if [ "$link_target" != "$checkout_dir/${links[$i]}" ]
    then
      echo_err "symlink '$HOME/$i => $checkout_dir/${links[$i]}' has been changed!"
    fi
  else
    echo_err "symlink '$HOME/$i => $checkout_dir/${links[$i]}' does not exist!"
  fi
done
