#!/usr/bin/env badash
# shellcheck shell=bash

# help text
show_help_msg() {
  echo "verify-dotfile-links - Verify the links to the dotfiles haven't changed"
  echo 'Usage: verify-dotfile-links [options] [checkout_dir]'
  echo ''
  echo 'Options:'
  echo '  -h               Show this help message'
  echo ''
  echo 'Arguments:'
  # shellcheck disable=SC2016
  echo '  checkout_dir     (optional) The directory where the repo is checked out (defaults to "$HOME/dotfiles")'
}

# argument parsing
while getopts ":h" opt
do
  case $opt in
    h)
      show_help_msg && exit 0
      ;;
    \?)
      @echo-err "$0: invalid option '-$OPTARG'"
      exit 1
      ;;
    :)
      @echo-err "$0: option '-$OPTARG' requires an argument"
      exit 1
      ;;
  esac
done
shift $((OPTIND-1))
checkout_dir="${1:-$HOME/src/gh/dotfiles}"

# check dependent commands
@uses-cmds readlink

# use bash 4.x associative arrays
declare -A links

# vim
links[".vimrc"]=".vimrc"
links[".vim"]=".vim"

# bash
links[".bash_profile"]=".bash_profile"
links[".bashrc"]=".bashrc"

# inputrc
links[".inputrc"]=".inputrc"

# git
links[".gitignore"]=".gitignore"
links[".gitconfig"]=".gitconfig"
links[".gitconfig-oss"]=".gitconfig-oss"
links[".gitconfig-work"]=".gitconfig-work"

# tmux
links[".tmux.conf"]=".tmux.conf"

# bundler
links[".bundle"]=".bundle"

# rubocop
links[".rubocop.yml"]=".rubocop.yml"

# karabiner elements
links[".config/karabiner"]="karabiner"

# typescript
links["tsconfig.json"]="tsconfig.json"

# eslint
# oops, don't include this
#links[".eslintrc.js"]=".eslintrc.js"

# machine-specific checks
host_name="$(hostname)"
if [[ "$host_name" =~ (MacBook-Air|Michaels-Air) ]]
then
  # home laptop
  links[".ssh/config"]=".ssh-config-mac"
elif [[ "$host_name" =~ mistewar-mn ]]
then
  # work laptop
  links[".ssh/config.custom"]=".ssh-config-mac"
elif [[ "$host_name" =~ mistewar-ld ]]
then
  # work vm
  links[".ssh/config.custom"]=".ssh-config-linux"
else
  @echo-err "Machine '$host_name' has not been configured for this script"
  exit 1
fi

# verify the links
link_errors=0
for i in "${!links[@]}"
do
  if [ -L "$HOME/$i" ]
  then
    # symlink exists, check if it points to the right place
    link_target="$(readlink "$HOME/$i")"
    if [ "$link_target" != "$checkout_dir/${links[$i]}" ]
    then
      @echo-err "symlink '$HOME/$i => $checkout_dir/${links[$i]}' is the wrong target!"
      @echo-err "        (points to '$link_target')"
      (( link_errors+=1 ))
    fi
  else
    @echo-err "symlink '$HOME/$i => $checkout_dir/${links[$i]}' does not exist!"
  fi
done

exit $link_errors
