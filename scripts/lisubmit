#!/usr/bin/env badash
# Squash commits, rebase, merge, and submit, for LI workflow

COLOR_FG_BOLD_BLUE='\033[1;34m'
COLOR_FG_GREEN='\033[0;32m'
COLOR_FG_RED='\033[0;31m'
COLOR_RESET='\033[0m'
DOTFILES_DIR="$HOME/dotfiles"

current_git_branch ()
{
    echo "$(git rev-parse --abbrev-ref HEAD)"
}
do_cmd ()
{
    local cmd_args="";
    for arg in "$@";
    do
        case "$arg" in
            *\ *)
                cmd_args="$cmd_args \"$arg\""
            ;;
            *)
                cmd_args="$cmd_args $arg"
            ;;
        esac;
    done;
    echo -e "${COLOR_FG_GREEN}($cmd_args )${COLOR_RESET}" 1>&2;
    command "$@"
}
do_git ()
{
    do_cmd git "$@"
}
echo_ack ()
{
    echo -e "${COLOR_FG_GREEN}$@${COLOR_RESET}" 1>&2
}
echo_err ()
{
    echo -e "${COLOR_FG_RED}$@${COLOR_RESET}" 1>&2
}
echo_fail_banner ()
{
    echo_err "***************";
    echo_err "*  Failed :(  *";
    echo_err "***************"
}
echo_info ()
{
    echo -e "${COLOR_FG_BOLD_BLUE}$@${COLOR_RESET}" 1>&2
}
echo_success_banner ()
{
    echo_ack "****************";
    echo_ack "*  Success :)  *";
    echo_ack "****************"
}
get_li_rb_api_def ()
{
    local api_def="";
    local cache_file="$DOTFILES_DIR/cache/li-rb-api-def.cache";
    local cache_file_expired="$(find $cache_file -mtime +1 2>/dev/null)";
    if [ ! -f "$cache_file" ] || [ -n "$cache_file_expired" ]; then
        echo_info "RB API definitions not cached, requesting...";
        api_def="$(curl -X GET -H 'Accept: application/json' 'https://rb.corp.linkedin.com/api/' 2>/dev/null)";
        exit_code="$?";
        if [ "$exit_code" -ne 0 ]; then
            echo_err "Failed to get RB API definitions. Exit code was: $exit_code";
        else
            echo "$api_def" > "$cache_file";
        fi;
    else
        api_def=$(<"$cache_file");
    fi;
    echo "$api_def"
}
get_li_rb_title ()
{
    if [ -n "$1" ]; then
        api_uri_template=$(get_li_rb_uri_template "review_request");
        request_url=${api_uri_template/\{review_request_id\}/$1};
        if [ -n "$request_url" ]; then
            summary=$(curl -X GET -H 'Accept: application/json' "$request_url" 2>/dev/null | jq --raw-output '.review_request.summary');
            echo "$summary";
        fi;
    fi
}
get_li_rb_uri_template ()
{
    template="$(get_li_rb_api_def | jq --raw-output ".uri_templates.$1")";
    echo "$template"
}
git_review_board_id ()
{
    echo "$(git config --get branch.$1.reviewid)"
}
git_undo_merge ()
{
    do_git reset --merge ORIG_HEAD && do_git checkout "$1"
}
in_git_repo ()
{
    git status > /dev/null && return 0 || echo_err "Not in git repo" && return 1
}
no_uncommitted_changes ()
{
    [ "$(git status --porcelain --untracked-files=no)" != "" ] && echo_err ">_<  You have uncommitted changes" && return -1 || return 0
}
not_on_git_branch ()
{
    [ "$(current_git_branch)" == "$1" ] && echo_err ">_<  Doesn't work on branch '$1'" && return -1 || return 0
}

show_help_msg() {
  echo "lisubmit - Squash commits, rebase, merge, and submit, for LI workflow"
  echo 'Usage: lisubmit [options] [commit_msg] [commit_msg_extra_line]'
  echo ''
  echo 'Options:'
  echo '  -h                      Show this help message'
  echo ''
  echo 'Arguments:'
  echo '  commit_msg              (optional) Message for the commit'
  echo '  commit_msg_extra_line   (optional) Optional extra line for more details and/or overrides (defaults to "")'
}

while getopts ":h" opt
do
  case $opt in
    h)
      show_help_msg && exit 0
      ;;
    \?)
      echo_err "$0: invalid option '-$OPTARG'"
      exit 1
      ;;
    :)
      echo_err "$0: option '-$OPTARG' requires an argument"
      exit 1
      ;;
  esac
done
shift $((OPTIND-1))
# both arguments are optional
commit_msg="${1:-}"
commit_msg_extra_line="${2:-}"

@uses_cmds jq gram gmm gpr squash-branch

in_mint_submit_repo() {
  if [ -f "$PWD/product-spec.json" ]; then
    submit_def="$(cat $PWD/product-spec.json | jq '.build.commands.submit')"
    [ "$submit_def" != 'null' ]
    return
  else
    return
  fi
}

branch_name="$(current_git_branch)"
review_id="$(git_review_board_id $branch_name)"
@exit_on_error "Dang it! Getting the review board ID failed"

echo_info "Submitting RB $review_id..."
review_title="$(get_li_rb_title $review_id)"

if [ -z "$commit_msg" ]
then
  # no message provided, use the title from the RB
  commit_msg="$review_title"
fi

# prompt for things
echo -n "Commit message [$commit_msg]: "
read read_commit_msg
if [ -n "$read_commit_msg" ]
then
  commit_msg="$read_commit_msg"
fi

# from the "how to override your commit like a pro" gdoc
echo "Commit message 2nd line, for overrides"
echo "These should only be used by oncall, or for immediate response situations:"
echo ""
echo "  ACLOVERRIDE           - cannot get an ACL owner to ship within your SLA (sends email to bypassed ACLs)"
echo "  PCVALIDATIONOVERRIDE  - unblock trunk with a non-functional change (fixing ACL, extending whitelist) - CAUTION!!! this can block trunk"
echo "  PCLOVERRIDE           - for compatibility test that is failing in PCL"
echo "  TRUNKBLOCKERFIX       - override trunk lock (consult infra first)"
echo "  EOLVALIDATIONOVERRIDE - commit is blocked by out of date dependency (fix forward when possible)"
echo "  CHERRYPICKOVERRIDE    - commit a change to hotfix branch but not master"
echo "v-web specific:"
echo "  I18NOVERRIDE          - bypass i18n validation in precommit (doesn't override precommit altogether)"
echo "  LIXOVERDUEOVERRIDE    - if precommit is being blocked by an overdue lix (doesn't override precommit altogether)"
echo "  DISABLEDTESTOVERRIDE  - bypass enforcement of disabled tests per pillar (doesn't override precommit altogether)"
echo "  DIFF_VERIFY_OVERRIDE  - change has diffs from last ship-it and a reviewer is not available"
echo -n "[$commit_msg_extra_line]: "
read commit_msg_extra
if [ -n "$commit_msg_extra" ]; then commit_msg_extra_line="$commit_msg_extra"; fi

if in_git_repo && no_uncommitted_changes
then
  echo_info "commit message: $commit_msg"
  echo_info "(extra line)  : $commit_msg_extra_line"
  echo_info ""
  # squash changes on this branch
  squash-branch "$commit_msg" "$commit_msg_extra_line"
  @exit_on_error "Dang it! squashing failed (should probably do some kind of recovery here...)"

  if not_on_git_branch 'master'
  then
    # rebase current branch against master
    gram
    @exit_on_error "Failed to rebase against master"
    # merge into master
    gmm
    @exit_on_error "Merge into master failed - good luck"
  fi

  gpr
  @exit_on_error "Failed to pull and rebase master"

  # apply the RB to the commit
  # if this fails, means I don't have the necessary ACLs (for git submit repos)
  do_git review dcommit -r "$review_id"
  # if dcommit failed, probably missing a shipit from ACL
  @exit_on_error "Dang it! 'git review dcommit' failed, undoing the merge" 'git_undo_merge "$branch_name"'

  # git submit
  # (could do `git submit --async`, but whatever)

  # use --async?
  echo -n "Submit async? (to work on another branch) [Y/n]: "
  read async_confirm
  if [ -z "$async_confirm" ] || [ "$async_confirm" == "Y" ] || [ "$async_confirm" == "y" ]
  then
    echo_info "Submitting asynchronously - you can go work on another branch"
    do_git submit --async
    if [ "$?" -ne 0 ]; then echo_fail_banner; else echo_success_banner; fi
    # either way, success or fail, want to undo the merge to preserve the branch
    echo_info "Checking out your original branch..."
    git_undo_merge "$branch_name"
  else
    echo_info "Submitting synchronously - watch this terminal for progress"
    do_git submit
    if [ "$?" -ne 0 ]; then
      # submit failed, could be precommit, or ACL check, or whatever
      echo_fail_banner
      echo_info "Undoing the merge..."
      git_undo_merge "$branch_name"
      exit 1
    fi
    echo_success_banner
    echo_info "Pulling changes into master..."
    # rebase to pick up the change
    gpr
    # and done!
  fi
fi
