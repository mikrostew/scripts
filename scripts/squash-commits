#!/usr/bin/env badash
# shellcheck shell=bash

# [git] Squash the input number of commits on the current branch

COLOR_FG_RED='\033[0;31m'
COLOR_RESET='\033[0m'

echo_err ()
{
    echo -e "${COLOR_FG_RED}$*${COLOR_RESET}" 1>&2
}
show_help_msg() {
  echo "squash-commits - [git] Squash the input number of commits on the current branch"
  echo 'Usage: squash-commits [options] num_commits commit_msg [commit_msg_extra_line]'
  echo ''
  echo 'Options:'
  echo '  -h                      Show this help message'
  echo ''
  echo 'Arguments:'
  echo '  commit_msg              Commit message'
  echo '  commit_msg_extra_line   (optional) Extra line for more info, overrides, etc. (defaults to "")'
  echo '  num_commits             Number of commits to squash'
}

while getopts ":h" opt
do
  case $opt in
    h)
      show_help_msg && exit 0
      ;;
    \?)
      echo_err "$0: invalid option '-$OPTARG'"
      exit 1
      ;;
    :)
      echo_err "$0: option '-$OPTARG' requires an argument"
      exit 1
      ;;
  esac
done
shift $((OPTIND-1))

num_commits="${1:?Missing argument \'num_commits\'}"
commit_msg="${2:?Missing argument \'commit_msg\'}"
commit_msg_extra_line="${3:-}"

# "squashes" commits by combining them into a single commit
if [ -n "$commit_msg_extra_line" ]; then
  # multiple lines of commit messages
  @wait-for-command git reset --soft "HEAD~$num_commits" && @wait-for-command git commit -m "$commit_msg" -m "$commit_msg_extra_line"
else
  @wait-for-command git reset --soft "HEAD~$num_commits" && @wait-for-command git commit -m "$commit_msg"
fi
