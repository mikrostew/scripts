#!/usr/bin/env bash
###########################################################################
# DO NOT EDIT! This script was auto-generated. To update this script, edit
# the file script-gen/verify_dotfile_links, and run './generate-scripts.sh'
###########################################################################
#6e20cee8e96e192e8e00746e435a3e66

COLOR_FG_RED='\033[0;31m'
COLOR_RESET='\033[0m'
echo_err ()
{
    echo -e "${COLOR_FG_RED}$@${COLOR_RESET}" 1>&2
}
requirement_check ()
{
    local cmd="$1";
    local how_to_install="$2";
    if [ ! $(command -v $cmd) ]; then
        echo_err "[ERROR] Command '$cmd' is required for this script, but not installed";
        echo_err "To install: $how_to_install";
        return 1;
    else
        return 0;
    fi
}
show_help_msg() {
  echo "verify_dotfile_links - Verify the links to the dotfiles haven't changed"
  echo 'Usage: verify_dotfile_links [options] [checkout_dir]'
  echo ''
  echo 'Options:'
  echo '  -h               Show this help message'
  echo ''
  echo 'Arguments:'
  echo '  checkout_dir     (optional) The directory where the repo is checked out (defaults to $HOME/dotfiles)'
}
while getopts ":h" opt
do
  case $opt in
    h)
      show_help_msg && exit 0
      ;;
    \?)
      echo_err "$0: invalid option '-$OPTARG'"
      exit 1
      ;;
    :)
      echo_err "$0: option '-$OPTARG' requires an argument"
      exit 1
      ;;
  esac
done
shift $((OPTIND-1))
combined_return=0
requirement_check readlink "search 'how to install readlink'"
combined_return=$(( combined_return + $? ))
if [ "$combined_return" != 0 ]; then exit $combined_return; fi
checkout_dir="${1}"
checkoutdir="${checkout_dir:-$HOME/dotfiles}"
declare -A links
links[".vimrc"]=".vimrc"
links[".vim"]=".vim"
links[".bash_profile"]=".bash_profile"
links[".bashrc"]=".bashrc"
links[".inputrc"]=".inputrc"
links[".gitignore"]=".gitignore"
links[".tmux.conf"]=".tmux.conf"
links[".bundle"]=".bundle"
links[".rubocop.yml"]=".rubocop.yml"
if [ "$(uname -s)" == "Darwin" ]
then
  links[".ssh/config"]=".ssh-config-mac"
elif [ "$(uname -s)" == "Linux" ]
then
  links[".ssh/config"]=".ssh-config-linux"
fi
for i in "${!links[@]}"
do
  if [ -L "$HOME/$i" ]
  then
    link_target="$(readlink $HOME/$i)"
    if [ "$link_target" != "$checkoutdir/${links[$i]}" ]
    then
      echo_err "symlink '$HOME/$i => $checkoutdir/${links[$i]}' has been changed!"
    fi
  else
    echo_err "symlink '$HOME/$i => $checkoutdir/${links[$i]}' does not exist!"
  fi
done
