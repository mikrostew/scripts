#!/usr/bin/env badash

COLOR_FG_BOLD_BLUE='\033[1;34m'
COLOR_FG_RED='\033[0;31m'
COLOR_RESET='\033[0m'
echo_err ()
{
    echo -e "${COLOR_FG_RED}$@${COLOR_RESET}" 1>&2
}
echo_info ()
{
    echo -e "${COLOR_FG_BOLD_BLUE}$@${COLOR_RESET}" 1>&2
}
show_help_msg() {
  echo "lilinks - Presents a menu to open various URLs and things for linkedin daily stuff"
  echo 'Usage: lilinks [options]'
  echo ''
  echo 'Options:'
  echo '  -h               Show this help message'
}
while getopts ":h" opt
do
  case $opt in
    h)
      show_help_msg && exit 0
      ;;
    \?)
      echo_err "$0: invalid option '-$OPTARG'"
      exit 1
      ;;
    :)
      echo_err "$0: option '-$OPTARG' requires an argument"
      exit 1
      ;;
  esac
done
shift $((OPTIND-1))
@uses_cmds open/Darwin xdg-open/Linux

# all the possible menu options, mapped to function names
declare -A menu_items
menu_items['Cafe Menus']='cafe_menus'
menu_items['Floor Plans']='floor_plans'
menu_items['Review Boards']='review_boards'
menu_items['Coding Music']='coding_music'

# to account for Linux and Mac
open_url() {
  if system_is_darwin?
  then
    open "$1"
  elif system_is_linux?
  then
    xdg-open "$1"
  fi
}

cafe_menus() {
  # menus opened in reverse order, so the ones closest to me I will see first
  open_url 'https://epe-bizapi.linkedin.biz:6020/campuses/south-bay-hq/cafes/21/menu' # Elevate (580)
  open_url 'https://epe-bizapi.linkedin.biz:6020/campuses/south-bay-hq/cafes/23/menu' # Journey (950)
  open_url 'https://epe-bizapi.linkedin.biz:6020/campuses/south-bay-hq/cafes/19/menu' # Mezzo (700 bldg 3)
  open_url 'https://epe-bizapi.linkedin.biz:6020/campuses/south-bay-hq/cafes/22/menu' # Nosh (700 bldg 4)
}

floor_plans() {
  echo "floor_plans: TODO"
  # TODO: this should prompt for the building, and then link to the floor plan
  # (or, if I have these downloaded locally, open those instead, which should be faster)
}

review_boards() {
  # open review board dashboards for everybody on the team
  open_url 'https://rb.corp.linkedin.com/users/aravisha/'
  open_url 'https://rb.corp.linkedin.com/users/bblank/'
  open_url 'https://rb.corp.linkedin.com/users/cokim/'
  open_url 'https://rb.corp.linkedin.com/users/dcombs/'
  open_url 'https://rb.corp.linkedin.com/users/mistewar/'
  open_url 'https://rb.corp.linkedin.com/users/syeung/'
}

coding_music() {
  # some post-rock albums I like to put on to get in the zone
  open_url 'https://www.youtube.com/watch?v=Ziw4yd5R0QI' # Explosions in the Sky - The Earth Is Not a Cold Dead Place
  open_url 'https://www.youtube.com/watch?v=4RkZttZHFZU' # Mono - You Are There
  open_url 'https://www.youtube.com/watch?v=AFzAd4PNCaY' # Russian Circles - Station
}

# collect the menu items into an indexed array for selection (with sorted keys)
readarray -t menu_items_by_index <<< "$(for key in "${!menu_items[@]}"; do echo "$key"; done | sort )"
num_items="${#menu_items_by_index[@]}"

echo ""
echo "What do you want to open?"

for(( i = 0; i < $num_items; i++ ))
do
  # dislplay a 1-based index, which is nicer to select
  echo -e "[$(( i + 1 ))] ${menu_items_by_index[$i]}"
done

echo ""
echo -n "Selection: "

read item_num
if [ -n "$item_num" ] && (( "$item_num" <= "$num_items" ))
then
  (( item_index = item_num - 1 ))
  item_name="${menu_items_by_index[$item_index]}"
  echo_info "opening $item_name..."
  func_name="${menu_items[$item_name]}"
  # run the associated function
  "$func_name"
else
  echo_info "(no option selected)"
fi
