#!/usr/bin/env bash
###########################################################################
# DO NOT EDIT! This script was auto-generated. To update this script, edit
# the file script-gen/lireview, and run './generate-scripts.sh'
###########################################################################

COLOR_FG_BOLD_BLUE='\033[1;34m'
COLOR_FG_GREEN='\033[0;32m'
COLOR_FG_RED='\033[0;31m'
COLOR_RESET='\033[0m'
ADDITIONAL_USERS_GROUPS="flagship-productivity-reviewers"  # (comma-delimited)
echo_err() {
  echo -e "${COLOR_FG_RED}$@${COLOR_RESET}" >&2
}
echo_ack() {
  echo -e "${COLOR_FG_GREEN}$@${COLOR_RESET}" >&2
}
echo_info() {
  echo -e "${COLOR_FG_BOLD_BLUE}$@${COLOR_RESET}" >&2
}
do_cmd() {
  echo_ack "($@)"
  ( set -x; "$@" )
}
do_git() {
  do_cmd git "$@"
}
current_git_branch() {
  echo "$(git rev-parse --abbrev-ref HEAD)"
}
git_review_board_id() {
  echo "$(git config --get branch.$1.reviewid)"
}
requirements=( jq expect )
all_reqs_ok="true"
for executable in "${requirements[@]}"; do
  if [ ! $(command -v $executable) ]; then
    echo_err "'$executable' is required but not installed"
    all_reqs_ok="false"
  fi
done
if [ "$all_reqs_ok" == "false" ]; then
  exit 1
fi
branch_name=$(current_git_branch)
review_id="$(git_review_board_id $branch_name)"
if [ -n "$review_id" ]
then
  echo_info "RB $review_id already exists for this branch - updating..."
  input_description="$1"
  echo -n "Description of these changes [$input_description]: "
  read diff_description
  if [ -z "$diff_description" ]
  then
    diff_description="$input_description"
  fi
  do_git review update --open --diff-description "$diff_description"
else
  echo_info "No RB for this branch - creating one..."
  if [ -n "$1" ]
  then
    input_description="$1"
  else
    input_description="$(git log -1 --pretty=%B)"
  fi
  echo -n "Description of these changes [$input_description]: "
  read rb_description
  if [ -z "$rb_description" ]
  then
    rb_description="$input_description"
  fi
  echo_ack "( git review create --owners-only --open --description '$rb_description' )"
  expect <<EndOfGitReviewExpect
    set timeout 60
    spawn git review create --owners-only --open --description "$rb_description"
    expect -re "^Recommended reviewers.*Additional reviewers.*"
    send "$ADDITIONAL_USERS_GROUPS\n"
    expect eof
EndOfGitReviewExpect
fi
