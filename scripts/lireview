#!/usr/bin/env bash
###########################################################################
# DO NOT EDIT! This script was auto-generated. To update this script, edit
# the file script-gen/lireview, and run './generate-scripts.sh'
###########################################################################
#530ca15f82115f29ea83085fe30cdc79

COLOR_FG_BOLD_BLUE='\033[1;34m'
COLOR_FG_GREEN='\033[0;32m'
COLOR_RESET='\033[0m'
current_git_branch ()
{
    echo "$(git rev-parse --abbrev-ref HEAD)"
}
do_cmd ()
{
    echo -en "${COLOR_FG_GREEN}( " 1>&2;
    for arg in "$@";
    do
        case "$arg" in
            *\ *)
                echo -n "\"$arg\" "
            ;;
            *)
                echo -n "$arg "
            ;;
        esac;
    done;
    echo -e ")${COLOR_RESET}" 1>&2;
    command "$@"
}
do_git ()
{
    do_cmd git "$@"
}
echo_ack ()
{
    echo -e "${COLOR_FG_GREEN}$@${COLOR_RESET}" 1>&2
}
echo_info ()
{
    echo -e "${COLOR_FG_BOLD_BLUE}$@${COLOR_RESET}" 1>&2
}
git_review_board_id ()
{
    echo "$(git config --get branch.$1.reviewid)"
}
requirement_check ()
{
    local cmd="$1";
    local how_to_install="$2";
    if [ ! $(command -v $cmd) ]; then
        echo_err "[ERROR] Command '$cmd' is required for this script, but not installed";
        echo_err "To install: $how_to_install";
        return 1;
    else
        return 0;
    fi
}
combined_return=0
requirement_check jq "search 'how to install jq'"
combined_return=$(( combined_return + $? ))
requirement_check git "search 'how to install git'"
combined_return=$(( combined_return + $? ))
requirement_check expect "search 'how to install expect'"
combined_return=$(( combined_return + $? ))
if [ "$combined_return" != 0 ]; then exit $combined_return; fi
ADDITIONAL_USERS_GROUPS="flagship-productivity-reviewers"  # (comma-delimited)
branch_name=$(current_git_branch)
review_id="$(git_review_board_id $branch_name)"
if [ -n "$review_id" ]
then
  echo_info "RB $review_id already exists for this branch - updating..."
  input_description="$1"
  echo -n "Description of these changes [$input_description]: "
  read diff_description
  if [ -z "$diff_description" ]
  then
    diff_description="$input_description"
  fi
  do_git review update --open --diff-description "$diff_description"
else
  echo_info "No RB for this branch - creating one..."
  if [ -n "$1" ]
  then
    input_description="$1"
  else
    input_description="$(git log -1 --pretty=%B)"
  fi
  echo -n "Description of these changes [$input_description]: "
  read rb_description
  if [ -z "$rb_description" ]
  then
    rb_description="$input_description"
  fi
  echo_ack "( git review create --owners-only --open --description '$rb_description' )"
  expect <<EndOfGitReviewExpect
    set timeout 60
    spawn git review create --owners-only --open --description "$rb_description"
    expect -re "^Recommended reviewers.*Additional reviewers.*"
    send "$ADDITIONAL_USERS_GROUPS\n"
    expect eof
EndOfGitReviewExpect
fi
