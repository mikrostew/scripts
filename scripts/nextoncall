#!/usr/bin/env badash
###########################################################################
# DO NOT EDIT! This script was auto-generated. To update this script, edit
# the file ~/dotfiles/script-gen/nextoncall, and run 'generate-scripts.sh'
###########################################################################
#c895f7000bcf9c970bca7ff757cf9ed0

COLOR_FG_BOLD_BLUE='\033[1;34m'
COLOR_FG_RED='\033[0;31m'
COLOR_RESET='\033[0m'
echo_err ()
{
    echo -e "${COLOR_FG_RED}$@${COLOR_RESET}" 1>&2
}
requirement_check ()
{
    local cmd="$1";
    local how_to_install="$2";
    if [ ! $(command -v $cmd) ]; then
        echo_err "[ERROR] Command '$cmd' is required for this script, but not installed";
        echo_err "To install: $how_to_install";
        return 1;
    else
        return 0;
    fi
}
show_help_msg() {
  echo "nextoncall - Show my upcoming oncall shifts"
  echo 'Usage: nextoncall [options]'
  echo ''
  echo 'Options:'
  echo '  -h               Show this help message'
}
while getopts ":h" opt
do
  case $opt in
    h)
      show_help_msg && exit 0
      ;;
    \?)
      echo_err "$0: invalid option '-$OPTARG'"
      exit 1
      ;;
    :)
      echo_err "$0: option '-$OPTARG' requires an argument"
      exit 1
      ;;
  esac
done
shift $((OPTIND-1))
combined_return=0
requirement_check jq "search 'how to install jq'"
combined_return=$(( combined_return + $? ))
requirement_check e2d "search 'how to install e2d'"
combined_return=$(( combined_return + $? ))
requirement_check curl "search 'how to install curl'"
combined_return=$(( combined_return + $? ))
if [ "$combined_return" != 0 ]; then exit $combined_return; fi
data="$(curl -sS https://oncall.prod.linkedin.com/api/v0/users/$(whoami)/upcoming)"
exit_code="$?"
if [ "$exit_code" -ne 0 ]
then
  echo -e "${COLOR_FG_RED}Error running curl${COLOR_RESET}" >&2
  exit "$exit_code"
fi
json_data="$(echo "$data" | jq -r '.[]|"\(.team) \(.role) \(.start)"')"
exit_code="$?"
if [ "$exit_code" -ne 0 ]
then
  echo -e "${COLOR_FG_RED}Error running jq${COLOR_RESET}" >&2
  exit "$exit_code"
fi
while read team role ts
do
  formatted_time="$(echo $ts | e2d)"
  echo -e "$role oncall for $team at ${COLOR_FG_BOLD_BLUE}$formatted_time${COLOR_RESET}"
done <<< "$json_data"
