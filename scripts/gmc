#!/usr/bin/env badash
###########################################################################
# DO NOT EDIT! This script was auto-generated. To update this script, edit
# the file ~/dotfiles/script-gen/gmc, and run 'generate-scripts.sh'
###########################################################################
#198e8cec04b74fa6f5c290089f516dcc

COLOR_FG_BOLD_BLUE='\033[1;34m'
COLOR_FG_BOLD_RED='\033[1;31m'
COLOR_FG_RED='\033[0;31m'
COLOR_RESET='\033[0m'
current_git_branch ()
{
    echo "$(git rev-parse --abbrev-ref HEAD)"
}
echo_err ()
{
    echo -e "${COLOR_FG_RED}$@${COLOR_RESET}" 1>&2
}
in_git_repo ()
{
    git status > /dev/null && return 0 || echo_err "Not in git repo" && return 1
}
not_on_git_branch ()
{
    [ "$(current_git_branch)" == "$1" ] && echo_err ">_<  Doesn't work on branch '$1'" && return -1 || return 0
}
requirement_check ()
{
    local cmd="$1";
    local how_to_install="$2";
    if [ ! $(command -v $cmd) ]; then
        echo_err "[ERROR] Command '$cmd' is required for this script, but not installed";
        echo_err "To install: $how_to_install";
        return 1;
    else
        return 0;
    fi
}
show_help_msg() {
  echo "gmc - [git] Check if this branch is OK to merge, or it there are any conflicts with master (Git Merge Check)"
  echo 'Usage: gmc [options]'
  echo ''
  echo 'Options:'
  echo '  -h               Show this help message'
}
while getopts ":h" opt
do
  case $opt in
    h)
      show_help_msg && exit 0
      ;;
    \?)
      echo_err "$0: invalid option '-$OPTARG'"
      exit 1
      ;;
    :)
      echo_err "$0: option '-$OPTARG' requires an argument"
      exit 1
      ;;
  esac
done
shift $((OPTIND-1))
combined_return=0
requirement_check git "search 'how to install git'"
combined_return=$(( combined_return + $? ))
requirement_check sed "search 'how to install sed'"
combined_return=$(( combined_return + $? ))
if [ "$combined_return" != 0 ]; then exit $combined_return; fi
if in_git_repo && not_on_git_branch 'master'
then
  branch_name="$(current_git_branch)"
  merge_base="$(git merge-base master "$branch_name")"
  exit_code="$?"
  if [ "$exit_code" -ne 0 ]
  then
    echo -e "${COLOR_FG_RED}Error running git merge-base${COLOR_RESET}" >&2
    echo "Output was: $merge_base"
    exit "$exit_code"
  fi
  merge_tree_output="$(git merge-tree $merge_base master "$branch_name")"
  exit_code="$?"
  if [ "$exit_code" -ne 0 ]
  then
    echo -e "${COLOR_FG_RED}Error running git merge-tree${COLOR_RESET}" >&2
    echo "Output was: $merge_tree_output"
    exit "$exit_code"
  fi
  blue="$(echo -e $COLOR_FG_BOLD_BLUE)"
  red="$(echo -e $COLOR_FG_BOLD_RED)"
  reset="$(echo -e $COLOR_RESET)"
  sed -n '
    /^changed in both$/ {
      p; n
      p; n
      s/.*/'"$blue"'& (master)'"$reset"'/
      p; n
      s/.*/'"$red"'& ('"$branch_name"')'"$reset"'/
      G; p
    }
    /+<<<<<<< .our/,/+>>>>>>> .their/ {
      /+<<<<<<< .our/ s/.*/'"$blue"'& (master)'"$reset"'/
      /+>>>>>>> .their/ { s/.*/'"$red"'& ('"$branch_name"')'"$reset"'/; G; }
      p
    }
  ' <<< "$merge_tree_output"
fi
echo "coming soon..."
