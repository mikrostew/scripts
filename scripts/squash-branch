#!/usr/bin/env badash
###########################################################################
# DO NOT EDIT! This script was auto-generated. To update this script, edit
# the file ~/dotfiles/script-gen/squash-branch, and run 'generate-scripts.sh'
###########################################################################
#cbd2a8318a1b165ac556ba703c8c2092

COLOR_FG_BOLD_BLUE='\033[1;34m'
COLOR_FG_RED='\033[0;31m'
COLOR_RESET='\033[0m'
based_on_master_or_origin ()
{
    local tracking_branch="$(git rev-parse --abbrev-ref --symbolic-full-name $1@{u} 2>/dev/null)";
    if [ "$tracking_branch" == "origin/master" ]; then
        echo "origin/master";
    else
        echo "master";
    fi
}
commit_diff_on_branch ()
{
    local git_rev_list_origin="$(git rev-list --count --left-right "$1"..."$2" 2>/dev/null)";
    if [ "$?" -eq 0 ] && [ -n "$git_rev_list_origin" ]; then
        local git_origin_arr=($git_rev_list_origin);
        echo "${git_origin_arr[0]}";
    else
        echo "0";
    fi
}
current_git_branch ()
{
    echo "$(git rev-parse --abbrev-ref HEAD)"
}
echo_err ()
{
    echo -e "${COLOR_FG_RED}$@${COLOR_RESET}" 1>&2
}
echo_info ()
{
    echo -e "${COLOR_FG_BOLD_BLUE}$@${COLOR_RESET}" 1>&2
}
requirement_check ()
{
    local cmd="$1";
    local how_to_install="$2";
    if [ ! $(command -v $cmd) ]; then
        echo_err "[ERROR] Command '$cmd' is required for this script, but not installed";
        echo_err "To install: $how_to_install";
        return 1;
    else
        return 0;
    fi
}
show_help_msg() {
  echo "squash-branch - [git] Squash commits in current branch into a single commit"
  echo 'Usage: squash-branch [options] commit_msg [commit_msg_extra_line]'
  echo ''
  echo 'Options:'
  echo '  -h                      Show this help message'
  echo ''
  echo 'Arguments:'
  echo '  commit_msg              Commit message'
  echo '  commit_msg_extra_line   (optional) Extra line for more info, overrides, etc. (defaults to "")'
}
while getopts ":h" opt
do
  case $opt in
    h)
      show_help_msg && exit 0
      ;;
    \?)
      echo_err "$0: invalid option '-$OPTARG'"
      exit 1
      ;;
    :)
      echo_err "$0: option '-$OPTARG' requires an argument"
      exit 1
      ;;
  esac
done
shift $((OPTIND-1))
combined_return=0
requirement_check squash-commits "search 'how to install squash-commits'"
combined_return=$(( combined_return + $? ))
requirement_check git "search 'how to install git'"
combined_return=$(( combined_return + $? ))
if [ "$combined_return" != 0 ]; then exit $combined_return; fi
commit_msg="${1:?Missing argument \'commit_msg\'}"
commit_msg_extra_line="${2:-}"
branch_name=$(current_git_branch)
based_on=$(based_on_master_or_origin $branch_name)
num_commits_on_branch="$(commit_diff_on_branch $branch_name $based_on)"
echo_info "$num_commits_on_branch change(s) between '$branch_name' and '$based_on'"
echo -n "Confirm squashing $num_commits_on_branch commits [Y/n]: "
read confirm
if [ -z "$confirm" ] || [ "$confirm" == "Y" ] || [ "$confirm" == "y" ]
then
  squash-commits "$num_commits_on_branch" "$commit_msg" "$commit_msg_extra_line"
else
  echo_info "Not squashing"
fi
