#!/usr/bin/env badash
###########################################################################
# DO NOT EDIT! This script was auto-generated. To update this script, edit
# the file ~/dotfiles/script-gen/ginit, and run 'generate-scripts.sh'
###########################################################################
#515bd46742a700363cb6a38b21b549d8

COLOR_FG_BOLD_BLUE='\033[1;34m'
COLOR_FG_GREEN='\033[0;32m'
COLOR_FG_RED='\033[0;31m'
COLOR_RESET='\033[0m'
do_cmd ()
{
    local cmd_args="";
    for arg in "$@";
    do
        case "$arg" in
            *\ *)
                cmd_args="$cmd_args \"$arg\""
            ;;
            *)
                cmd_args="$cmd_args $arg"
            ;;
        esac;
    done;
    echo -e "${COLOR_FG_GREEN}($cmd_args )${COLOR_RESET}" 1>&2;
    command "$@"
}
do_git ()
{
    do_cmd git "$@"
}
echo_err ()
{
    echo -e "${COLOR_FG_RED}$@${COLOR_RESET}" 1>&2
}
echo_info ()
{
    echo -e "${COLOR_FG_BOLD_BLUE}$@${COLOR_RESET}" 1>&2
}
show_help_msg() {
  echo "ginit - [git] Initialize a repo with README, LICENSE, and maybe origin (Git Init)"
  echo 'Usage: ginit [options] repo_name [repo_origin]'
  echo ''
  echo 'Options:'
  echo '  -h               Show this help message'
  echo ''
  echo 'Arguments:'
  echo '  repo_origin      (optional) Optional URL of origin (usually on github) (defaults to "")'
  echo '  repo_name        The name of the repository'
}
while getopts ":h" opt
do
  case $opt in
    h)
      show_help_msg && exit 0
      ;;
    \?)
      echo_err "$0: invalid option '-$OPTARG'"
      exit 1
      ;;
    :)
      echo_err "$0: option '-$OPTARG' requires an argument"
      exit 1
      ;;
  esac
done
shift $((OPTIND-1))
repo_name="${1:?Missing argument \'repo_name\'}"
repo_origin="${2:-}"
@uses_cmds vim curl jq spinner
my_username="mikrostew"
my_name="Michael Stewart"
current_year="$(date +%Y)"
api_token="$($HOME/Dropbox/secret/get-api-token github-license-token)"
github_license_api="https://api.github.com/licenses"
exec 3< <(curl -sSLf -u "$my_username:$api_token" "$github_license_api")
curl_pid="$!"
spinner -m "Querying $github_license_api for license info..." $curl_pid
licenses_info="$(cat <&3)"
wait $curl_pid
@exit-on-error 'API call failed' 'echo "JSON output: $licenses_info"'
readarray -t license_names <<< "$(echo "$licenses_info" | jq -r '.[] | .name')"
readarray -t license_urls <<< "$(echo "$licenses_info" | jq -r '.[] | .url')"
num_licenses="${#license_names[@]}"
echo_info "Got $num_licenses licenses from $github_license_api"
do_cmd mkdir -p "$repo_name"
do_cmd cd "$repo_name"
do_git init
do_cmd vim +"normal i# $repo_name" README.md
do_git add README.md
echo ""
echo "Choose a license:"
echo "(When working with a specific community, see https://choosealicense.com/community/)"
echo ""
for(( i = 0; i < $num_licenses; i++ ))
do
  echo -e "[$(( i + 1 ))] ${license_names[$i]}"
done
echo ""
echo -n "Selection [Enter for none]: "
read item_num
if [ -n "$item_num" ] && (( "$item_num" <= "$num_licenses" ))
then
  (( item_index = item_num - 1 ))
  license_name="${license_names[$item_index]}"
  license_url="${license_urls[$item_index]}"
  echo_info "Selected $license_name"
  exec 3< <(curl -sSLf -u "$my_username:$api_token" "$license_url")
  curl_pid="$!"
  spinner -m "Getting text of $license_name from $license_url..." $curl_pid
  license_info="$(cat <&3)"
  wait $curl_pid
  @exit-on-error 'API call failed' 'echo "JSON output: $license_info"'
  echo "$license_info" | jq -r '.body' | sed -e "s/\[year\]/$current_year/" -e "s/\[fullname\]/$my_name/" > LICENSE
  do_git add LICENSE
else
  echo_info "(no license selected)"
fi
echo ""
echo "What will be committed:"
do_git diff --cached
echo -n "Confirm commit [Y/n]: "
read confirm
if [ -z "$confirm" ] || [ "$confirm" == "Y" ] || [ "$confirm" == "y" ]
then
  do_git commit -m "initial setup"
  if [ -n "$repo_origin" ]
  then
    do_git remote add origin git@github.com:mikrostew/badash.git
    do_git push -u origin master
  fi
else
  echo_info "Not committing"
fi
