#!/usr/bin/env badash
# shellcheck shell=bash

# release npm project
#  - update version in package.json
#  - commit with version in commit message
#  - [optional] publish to npm
# (adapted from https://github.com/stefanpenner/dotfiles/)

COLOR_FG_BOLD_BLUE='\033[1;34m'
COLOR_RESET='\033[0m'

# helper functions
current_git_branch() {
  git rev-parse --abbrev-ref HEAD
}
echo_info()
{
  echo -e "${COLOR_FG_BOLD_BLUE}$*${COLOR_RESET}" 1>&2
}
in_git_repo() {
  git status >/dev/null && return 0 || @echo-err "Not in git repo" && return 1
}
on_main_branch() {
  current_branch="$(current_git_branch)"
  if [ "$current_branch" == "main" ] || [ "$current_branch" == "master" ]
  then
    return 0
  else
    @echo-err ">_<  Must be on branch 'main' or 'master' for this"
    return 1
  fi
}


if in_git_repo && on_main_branch
then
  tag="${1:?Must include a version argument}"
  current_branch="$(current_git_branch)"

  if [ -f package.json ]; then
    jq ".version=\"$tag\"" < package.json | sponge package.json
    git diff
    @wait-for-command git add ./package.json
  fi

  @wait-for-command git commit -m "release v$tag"
  # using annotated tags, which are a little nicer than plain tags
  @wait-for-command git tag -a -m "release v$tag" "v$tag"
  git log -n1
  @wait-for-command git push origin "$current_branch"
  @wait-for-command git push --tags

  # TODO: add a prompt or cmd line flag for this?
  if [ -f package.json ]; then
    # I don't run this script very often, so I always need to login
    if ! ( npm login && @wait-for-command npm publish --access=public )
    then
      @echo-err "failed to publish package - you will need to rerun:"
      # shellcheck disable=SC2016
      @echo-err '`npm login && npm publish --access=public`'
      exit 1
    fi
  fi

  echo_info "released as v$tag ðŸŽ‰"
  echo -n "released as v$tag ðŸŽ‰" | pbcopy
fi
