#!/usr/bin/env bash
###########################################################################
# DO NOT EDIT! This script was auto-generated. To update this script, edit
# the file script-gen/gpf, and run './generate-scripts.sh'
###########################################################################
#118750756cc2368b2107186e5f2a7bbb

COLOR_FG_GREEN='\033[0;32m'
COLOR_FG_RED='\033[0;31m'
COLOR_RESET='\033[0m'
do_cmd ()
{
    local cmd_args="";
    for arg in "$@";
    do
        case "$arg" in
            *\ *)
                cmd_args="$cmd_args \"$arg\""
            ;;
            *)
                cmd_args="$cmd_args $arg"
            ;;
        esac;
    done;
    echo -e "${COLOR_FG_GREEN}($cmd_args )${COLOR_RESET}" 1>&2;
    command "$@"
}
do_git ()
{
    do_cmd git "$@"
}
echo_err ()
{
    echo -e "${COLOR_FG_RED}$@${COLOR_RESET}" 1>&2
}
requirement_check ()
{
    local cmd="$1";
    local how_to_install="$2";
    if [ ! $(command -v $cmd) ]; then
        echo_err "[ERROR] Command '$cmd' is required for this script, but not installed";
        echo_err "To install: $how_to_install";
        return 1;
    else
        return 0;
    fi
}
show_help_msg() {
  echo "gpf - [git] Force-push changes (Git Push Force)"
  echo 'Usage: gpf [options]'
  echo ''
  echo 'Options:'
  echo '  -h               Show this help message'
}
while getopts ":h" opt
do
  case $opt in
    h)
      show_help_msg && exit 0
      ;;
    \?)
      echo_err "$0: invalid option '-$OPTARG'"
      exit 1
      ;;
    :)
      echo_err "$0: option '-$OPTARG' requires an argument"
      exit 1
      ;;
  esac
done
shift $((OPTIND-1))
combined_return=0
requirement_check git "search 'how to install git'"
combined_return=$(( combined_return + $? ))
if [ "$combined_return" != 0 ]; then exit $combined_return; fi
do_git push --force-with-lease
