#!/usr/bin/env badash
# Automatically do things that I use to do manually every morning

COLOR_FG_BOLD_BLUE='\033[1;34m'
COLOR_FG_BOLD_GREEN='\033[1;32m'
COLOR_FG_GREEN='\033[0;32m'
COLOR_FG_RED='\033[0;31m'
COLOR_RESET='\033[0m'

current_git_branch () {
  git rev-parse --abbrev-ref HEAD
}
echo_ack () {
  echo -e "${COLOR_FG_GREEN}$@${COLOR_RESET}" 1>&2
}
echo_err () {
  echo -e "${COLOR_FG_RED}$@${COLOR_RESET}" 1>&2
}

# check if something is installed - if so, upgrade it, if not, `brew install` it
brew-install-or-upgrade() {
  # arguments
  executable_name="$1"
  brew_package="$2"
  # TODO: cask or keg, maybe?

  install_path=$(which "$executable_name")
  if [ -z "$install_path" ]; then
    # not installed, so install it
    @wait-for-command brew install "$brew_package"
    if [ "$?" != 0 ]; then errors+=("brew install $brew_package"); fi
  else
    # already installed, so try to upgrade it
    @wait-for-command brew upgrade "$brew_package"
    if [ "$?" != 0 ]; then errors+=("brew upgrade $brew_package"); fi
  fi
}

# collect errors, and display at the end
errors=()

# different things for different machines
HOST_NAME="$(hostname)"
if [[ "$HOST_NAME" =~ MacBook-Air ]]
then
  machine="Home Laptop"
elif [[ "$HOST_NAME" =~ mistewar-mn ]]
then
  machine="Work Laptop"
elif [[ "$HOST_NAME" =~ mistewar-ld ]]
then
  machine="Work VM"
else
  echo_err "Machine '$HOST_NAME' has not been configured for this script"
  exit 1
fi
echo ""
echo -e "Running for '${COLOR_FG_BOLD_BLUE}$machine${COLOR_RESET}' ($HOST_NAME)"
echo ""

# some things need a password, so do that first
if [ "$machine" == "Work Laptop" ]
then
  echo "(TODO: password setup)"
  echo ""
  ldap_pass="$(security find-generic-password -ga ldap_pass -w)"
  if [ -z "$ldap_pass" ]
  then
    echo_err "Unable to get LDAP password - you will be prompted for that later..."
  fi
fi

if [[ "$machine" =~ Laptop ]]
then
  echo "Applications"

  # open activity monitor (after making sure it's not running)
  kill-proc-name "Activity Monitor"
  #run-app-path "/System/Applications/Utilities/Activity Monitor.app/Contents/MacOS/Activity Monitor"

  # kill any programs that I don't want to be running
  kill-proc-name "zoom.us"
  kill-proc-name "App Store"
  kill-proc-name "Discord"
fi

if [ "$machine" == "Work Laptop" ]
then
  # kill and restart some things
  kill-proc-name "Outlook"
  # if successful, sometimes that will bring up a dialog about force quitting, whatever, don't care, kill that too
  sleep 0.5
  kill-proc-name "Microsoft Error Reporting"
  sleep 0.5
  run-app-path "/Applications/Microsoft Outlook.app/Contents/MacOS/Microsoft Outlook"

  kill-proc-name "Slack"
  sleep 0.5
  run-app-path "/Applications/Slack.app/Contents/MacOS/Slack"
fi

if [[ "$machine" =~ Laptop ]]
then
  # TODO: make sure xcodebuild is using the full Xcode install, instead of just command line tools
  # (https://stackoverflow.com/questions/17980759/xcode-select-active-developer-directory-error)
  #echo "Xcode"
  #( sleep 10; paste-term-password "$ldap_pass" ) &
  #sudo xcode-select -s /Applications/Xcode.app/Contents/Developer

  echo "Homebrew"

  # update homebrew before upgrading things
  @wait-for-command brew update
  if [ "$?" != 0 ]; then errors+=('brew update'); fi

  # install or upgrade things installed via homebrew
  brew-install-or-upgrade bats bats-core
  brew-install-or-upgrade convert imagemagick
  brew-install-or-upgrade expect expect
  brew-install-or-upgrade gh gh
  brew-install-or-upgrade gimp gimp
  brew-install-or-upgrade git git
  brew-install-or-upgrade git-gui git-gui
  brew-install-or-upgrade jq jq
  brew-install-or-upgrade mvim macvim # upgrading vim is handled by macvim
  brew-install-or-upgrade sponge moreutils
  brew-install-or-upgrade terminal-notifier terminal-notifier
  brew-install-or-upgrade tmux tmux
  brew-install-or-upgrade watch watch
  brew-install-or-upgrade wget wget
  brew-install-or-upgrade youtube-dl youtube-dl
fi

echo "Dotfile links"
# verify that dotfile links haven't been changed
@wait-for-command verify-dotfile-links "$HOME/src/gh/dotfiles"
if [ "$?" != 0 ]; then errors+=('verify-dotfile-links'); fi

# TODO: make sure syncthing is running

if [ "$machine" == "Home Laptop" ]
then
  # OSS repos

  echo "Dotfiles"
  cd "$HOME/src/gh/dotfiles/"
  # pull, rebase, push to sync anything I've changed recently
  gpr && gp
  if [ "$?" != 0 ]; then errors+=('dotfiles - pull, rebase, and push'); fi

  echo "Badash"
  cd "/usr/local/lib/badash/"
  # just pull and rebase, to stay current with master
  gpr
  if [ "$?" != 0 ]; then errors+=('badash - pull and rebase'); fi

  # TODO: any more repos?

  # TODO: any blog pages I want to open here?
fi

if [[ "$machine" =~ Work ]]
then
  echo "Cleanup shivs"
  # clean up old stuff in $HOME/.shiv/
  # (hide the args, so this doesn't show the password)
  @wait-for-command --hide-args cleanup-shivs "$ldap_pass"
  if [ "$?" != 0 ]; then errors+=('cleanup shivs'); fi
fi

if [ "$machine" == "Work Laptop" ]
then
  # check that I am connected to VPN, and pause & wait for keypress
  if ping -c1 tools.corp.linkedin.com >/dev/null 2>&1
  then
    echo_ack "(Connected to VPN)"
  else
    echo_err "(Not connected to VPN)"
    # make sure iTerm is shown, so I see this
    osascript -e 'tell application "Iterm" to activate'
    echo "Please connect to VPN, then press any key to continue..."
    read -n1 -s
  fi

  # update this homebrew as well
  @wait-for-command brew engtools update
  if [ "$?" != 0 ]; then errors+=('brew engtools update'); fi

  echo "Engtools"

  # this prompts for my password
  # so use some applescript shenanigans to paste in the password to that
  ( sleep 10; paste-term-password "$ldap_pass" ) &
  @wait-for-command brew engtools install
  if [ "$?" != 0 ]; then errors+=('brew engtools install'); fi

  # OSS repos
  # (because git is routed over the VPN, ugh)

  echo "Dotfiles"
  cd "$HOME/src/gh/dotfiles/"
  # pull, rebase, push to sync anything I've changed recently
  gpr && gp
  if [ "$?" != 0 ]; then errors+=('dotfiles - pull, rebase, and push'); fi

  echo "Badash"
  cd "/usr/local/lib/badash/"
  # just pull and rebase, to stay current with master
  gpr
  if [ "$?" != 0 ]; then errors+=('badash - pull and rebase'); fi

  # LI repos

  echo "Voyager Web"
  cd "$HOME/src/li/voyager-web_trunk/"
  # if not on the master branch, checkout master, pull, and rebase
  # TODO: figure out the default branch name
  branch_name="$(current_git_branch)"
  # TODO: check for "main" as well?
  if [ "$branch_name" != "master" ]; then
    gc master
    # pull and rebase from master
    gpr
    if [ "$?" != 0 ]; then errors+=('voyager-web - pull and rebase'); fi
    # go back to the original branch
    gc "$branch_name"
  else
    # otherwise, we are on master, so just pull and rebase
    gpr
    if [ "$?" != 0 ]; then errors+=('voyager-web - pull and rebase'); fi
  fi

  echo "Blog"

  cd "$HOME/src/li/blog/"
  # if not on the master branch, checkout master, pull, and rebase
  # TODO: figure out the default branch name
  branch_name="$(current_git_branch)"
  # TODO: check for "main" as well?
  if [ "$branch_name" != "master" ]; then
    gc master
    # pull and rebase from master
    gpr
    if [ "$?" != 0 ]; then errors+=('blog - pull and rebase'); fi
    # go back to the original branch
    gc "$branch_name"
  else
    # otherwise, we are on master, so just pull and rebase
    gpr
    if [ "$?" != 0 ]; then errors+=('blog - pull and rebase'); fi
  fi

  # TODO: any more repos?

  # current blog post I'm working on
  open https://pages.linkedin.githubprivate.com/mistewar/blog/interviewing
fi

if [ "$machine" == "Work VM" ]
then
  echo "Engtools"

  # this prompts for my password
  sudo yum install usr-local-linkedin-dist
  if [ "$?" != 0 ]; then errors+=('yum install usr-local-linkedin-dist'); fi

  # OSS repos

  echo "Dotfiles"
  cd "$HOME/src/gh/dotfiles/"
  # pull, rebase, push to sync anything I've changed recently
  gpr && gp
  if [ "$?" != 0 ]; then errors+=('dotfiles - pull, rebase, and push'); fi

  echo "Badash"
  cd "/usr/local/lib/badash/"
  # just pull and rebase, to stay current with master
  gpr
  if [ "$?" != 0 ]; then errors+=('badash - pull and rebase'); fi

  # LI repos

  echo "Voyager Web"
  cd "$HOME/src/li/voyager-web_trunk/"
  # if not on the master branch, checkout master, pull, and rebase
  # TODO: figure out the default branch name
  branch_name="$(current_git_branch)"
  # TODO: check for "main" as well?
  if [ "$branch_name" != "master" ]; then
    gc master
    # pull and rebase from master
    gpr
    if [ "$?" != 0 ]; then errors+=('voyager-web - pull and rebase'); fi
    # go back to the original branch
    gc "$branch_name"
  else
    # otherwise, we are on master, so just pull and rebase
    gpr
    if [ "$?" != 0 ]; then errors+=('voyager-web - pull and rebase'); fi
  fi
fi

# display any errors encountered
if [ "${#errors[@]}" -gt 0 ]
then
  echo_err ""
  echo_err "There were ${#errors[@]} error(s):"
  for error in "${errors[@]}"
  do
    echo_err "$error"
  done
fi

# end on a happy note
echo_ack ""
echo_ack "Good Morning!"
echo_ack ""
if [ "$machine" == "Work Laptop" ]
then
  imgcat /usr/local/SyncThing/SyncImages/coffee.jpg
elif [ "$machine" == "Home Laptop" ]
then
  imgcat "$HOME/SyncImages/coffee.jpg"
fi
