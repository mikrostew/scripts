#!/usr/bin/env badash
# Automatically do things that I do every morning manually

# TODO: make the output of this nicer, eventually...

COLOR_FG_BOLD_BLUE='\033[1;34m'
COLOR_FG_BOLD_GREEN='\033[1;32m'
COLOR_FG_GREEN='\033[0;32m'
COLOR_FG_RED='\033[0;31m'
COLOR_RESET='\033[0m'

current_git_branch ()
{
    echo "$(git rev-parse --abbrev-ref HEAD)"
}
echo_ack ()
{
    echo -e "${COLOR_FG_GREEN}$@${COLOR_RESET}" 1>&2
}
echo_err ()
{
    echo -e "${COLOR_FG_RED}$@${COLOR_RESET}" 1>&2
}

# different things for different machines
HOST_NAME="$(hostname)"
if [[ "$HOST_NAME" =~ MacBook-Air ]]
then
  machine="Home Laptop"
elif [[ "$HOST_NAME" =~ mistewar-mn ]]
then
  machine="Work Laptop"
else
  echo_err "Machine '$HOST_NAME' has not been configured for this script"
  exit 1
fi
echo ""
echo -e "Running for '${COLOR_FG_BOLD_BLUE}$machine${COLOR_RESET}' ($HOST_NAME)"
echo ""

echo "Applications"

# open activity monitor (after making sure it's not running)
kill-proc-name "Activity Monitor"
run-app-path "/System/Applications/Utilities/Activity Monitor.app/Contents/MacOS/Activity Monitor"

# kill any programs that I don't want to be running
kill-proc-name "zoom.us"
kill-proc-name "App Store"
kill-proc-name "Discord"

if [ "$machine" == "Work Laptop" ]
then
  # kill and restart some things
  kill-proc-name "Outlook"
  # if successful, sometimes that will bring up a dialog about force quitting, whatever, don't care, kill that too
  sleep 0.5
  kill-proc-name "Microsoft Error Reporting"
  sleep 0.5
  run-app-path "/Applications/Microsoft Outlook.app/Contents/MacOS/Microsoft Outlook"

  kill-proc-name "Slack"
  sleep 0.5
  run-app-path "/Applications/Slack.app/Contents/MacOS/Slack"
fi

echo "Homebrew"

# update homebrew before upgrading things
@wait-for-command brew update

# upgrade things installed via homebrew
#@wait-for-command brew upgrade bash # that messes up this process
@wait-for-command brew upgrade bats-core
@wait-for-command brew upgrade expect
@wait-for-command brew upgrade gh
@wait-for-command brew upgrade git
@wait-for-command brew upgrade git-gui
@wait-for-command brew upgrade jq
@wait-for-command brew upgrade macvim # upgrading vim is handled by macvim
@wait-for-command brew upgrade moreutils
@wait-for-command brew upgrade terminal-notifier
@wait-for-command brew upgrade tmux
@wait-for-command brew upgrade watch
@wait-for-command brew upgrade wget
@wait-for-command brew upgrade youtube-dl

# OSS repos

echo "Dotfiles"
cd "$HOME/dotfiles/"
# pull, rebase, push to sync anything I've changed recently
gpr && gp

echo "Badash"
cd "/usr/local/lib/badash/"
# just pull and rebase, to stay current with master
gpr

# TODO: any more repos?


if [ "$machine" == "Work Laptop" ]
then
  # check that I am connected to VPN, and pause & wait for keypress
  if ping -c1 tools.corp.linkedin.com >/dev/null 2>&1
  then
    echo_ack "Looks like you're connected to VPN"
  else
    echo_err "Not connected to VPN"
    echo "Please connect to VPN, then press any key to continue..."
    read -n1 -s
  fi

  echo "Engtools"

  # update engtools
  @wait-for-command brew engtools install

  # LI repos

  echo "Voyager Web"

  cd "$HOME/src/li/voyager-web_trunk/"
  # if not on the master branch, checkout master, pull, and rebase
  branch_name="$(current_git_branch)"
  # TODO: check for "main" as well?
  if [ "$branch_name" != "master" ]; then
    gc master
    # pull and rebase from master
    gpr
    # go back to the original branch
    gc "$branch_name"
  else
    # pull and rebase from master
    gpr
  fi

  # TODO: any more repos?

  # blog pages I want to work on a little every day
  open https://pages.linkedin.githubprivate.com/mistewar/blog/about
fi

# end on a happy note
echo_ack ""
echo_ack "Good Morning!"
echo_ack ""
if [ "$machine" == "Work Laptop" ]
then
  imgcat /usr/local/SyncThing/SyncImages/coffee.jpg
elif [ "$machine" == "Home Laptop" ]
then
  imgcat "$HOME/SyncImages/coffee.jpg"
fi
