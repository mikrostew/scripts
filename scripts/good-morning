#!/usr/bin/env badash
# Automatically do things that I use to do manually every morning

# TODO: instead of hardcoding a bunch of if's here, use a config
# could `source` a config file with just vars...
# https://askubuntu.com/questions/743493/best-way-to-read-a-config-file-in-bash
# or use something like `jq` for a JSON config
# https://unix.stackexchange.com/questions/175648/use-config-file-for-my-shell-script
# (or there is `yq` for YAML, so I get comments ¯\_(ツ)_/¯)
# https://github.com/mikefarah/yq  (brew install yq)
#
# OR, just use a different language that can handle YAML/JSON/whatever much better...
# that ^^^

COLOR_FG_BOLD_BLUE='\033[1;34m'
COLOR_FG_BOLD_GREEN='\033[1;32m'
COLOR_FG_GREEN='\033[0;32m'
COLOR_FG_RED='\033[0;31m'
COLOR_RESET='\033[0m'

# collect stats, and display at the end
total_tasks=0
errors=()

current_git_branch () {
  git rev-parse --abbrev-ref HEAD
}
echo_ack () {
  echo -e "${COLOR_FG_GREEN}$@${COLOR_RESET}" 1>&2
}
echo_err () {
  echo -e "${COLOR_FG_RED}$@${COLOR_RESET}" 1>&2
}

# different things for different machines
HOST_NAME="$(hostname)"
if [[ "$HOST_NAME" =~ MacBook-Air ]] || [[ "$HOST_NAME" =~ Michaels-Air ]]
then
  machine="Home Laptop"
elif [[ "$HOST_NAME" =~ mistewar-mn ]]
then
  machine="Work Laptop"
elif [[ "$HOST_NAME" =~ mistewar-ld ]]
then
  machine="Work VM"
else
  echo_err "Machine '$HOST_NAME' has not been configured for this script"
  exit 1
fi
echo ""
echo -e "Running for '${COLOR_FG_BOLD_BLUE}$machine${COLOR_RESET}' ($HOST_NAME)"
echo ""

# some things need a password, so do that first
if [ "$machine" == "Work Laptop" ]
then
  echo "(TODO: password setup)"
  echo ""
  ldap_pass="$(security find-generic-password -ga ldap_pass -w)"
  if [ -z "$ldap_pass" ]
  then
    echo_err "Unable to get LDAP password - you will be prompted for that later..."
  fi
fi

if [[ "$machine" =~ Laptop ]]
then
  echo "Applications"

  # open activity monitor (after making sure it's not running)
  kill-proc-name "Activity Monitor"
  #run-app-path "/System/Applications/Utilities/Activity Monitor.app/Contents/MacOS/Activity Monitor"

  # kill any programs that I don't want to be running
  kill-proc-name "zoom.us"
  kill-proc-name "App Store"
  kill-proc-name "Discord"
  kill-proc-name "Microsoft Word"
fi

if [ "$machine" == "Work Laptop" ]
then
  # kill and restart some things
  # - well, I used to restart these, but that's kinda annoying, so I'm trying just to run them if they're not already running
  # - actually, just kill these - I'll start them when I need them
  kill-proc-name "Outlook"
  # if successful, sometimes that will bring up a dialog about force quitting, whatever, don't care, kill that too
  sleep 0.5
  kill-proc-name "Microsoft Error Reporting"
  #sleep 0.5
  #pgrep "Outlook" >/dev/null || run-app-path "/Applications/Microsoft Outlook.app/Contents/MacOS/Microsoft Outlook"

  kill-proc-name "Slack"
  #sleep 0.5
  #pgrep "Slack" >/dev/null || run-app-path "/Applications/Slack.app/Contents/MacOS/Slack"

  kill-proc-name "Microsoft Teams"
fi

if [[ "$machine" =~ Laptop ]]
then
  echo "Xcode"
  (( total_tasks++ ))
  # make sure xcodebuild is using the full Xcode install, instead of just command line tools
  xcode_path="$(xcode-select --print-path)"
  if [ "$xcode_path" != "/Applications/Xcode.app/Contents/Developer" ]
  then
    send-passwd-for-sudo "$ldap_pass" sudo xcode-select -s "/Applications/Xcode.app/Contents/Developer"
    xcode_path="$(xcode-select --print-path)"
    if [ "$xcode_path" != "/Applications/Xcode.app/Contents/Developer" ]
    then
      echo "❌ $xcode_path"
    else
      echo "✅ $xcode_path"
    fi
  else
    echo "✅ $xcode_path"
  fi

  # install or upgrade things installed via Homebrew and Volta
  good-morning-tasks.ts

  # make sure syncthing is running
  echo "Syncthing"
  if pgrep syncthing >/dev/null
  then
    echo "✅ syncthing"
  else
    echo "❌ syncthing"
  fi
fi

echo "Dotfile links"
# verify that dotfile links haven't been changed
@wait-for-command verify-dotfile-links "$HOME/src/gh/dotfiles"
if [ "$?" != 0 ]; then errors+=('verify-dotfile-links'); fi
(( total_tasks++ ))

if [ "$machine" == "Home Laptop" ]
then
  # OSS repos

  echo "Dotfiles"
  # TODO: check that directory exists
  cd "$HOME/src/gh/dotfiles/"
  # pull, rebase, push to sync anything I've changed recently
  # and install any updated dependencies
  gpr && gp && cd scripts/ && yarn install
  if [ "$?" != 0 ]; then errors+=('dotfiles - pull, rebase, push, install deps'); fi
  (( total_tasks++ ))

  echo "Badash"
  cd "/usr/local/lib/badash/"
  # just pull and rebase, to stay current with master
  gpr
  if [ "$?" != 0 ]; then errors+=('badash - pull and rebase'); fi
  (( total_tasks++ ))

  # TODO: any more repos?

  # TODO: any blog pages I want to open here?
fi

if [[ "$machine" =~ Work ]]
then
  echo "Cleanup shivs"
  # clean up old stuff in $HOME/.shiv/
  # (hide the args, so this doesn't show the password)
  @wait-for-command --hide-args cleanup-shivs "$ldap_pass"
  if [ "$?" != 0 ]; then errors+=('cleanup shivs'); fi
  (( total_tasks++ ))
fi

if [ "$machine" == "Work Laptop" ]
then
  # check that I am connected to VPN, and pause & wait for keypress
  if ping -c1 tools.corp.linkedin.com >/dev/null 2>&1
  then
    echo_ack "(Connected to VPN)"
  else
    echo_err "(Not connected to VPN)"
    # make sure iTerm is shown, so I see this
    osascript -e 'tell application "Iterm" to activate'
    echo "Please connect to VPN, then press any key to continue..."
    read -n1 -s
  fi

  # update this homebrew as well
  @wait-for-command brew engtools update
  if [ "$?" != 0 ]; then errors+=('brew engtools update'); fi
  (( total_tasks++ ))

  echo "Engtools"

  # (hide args, so this doesn't show the password)
  @wait-for-command --hide-args send-passwd-for-sudo "$ldap_pass" brew engtools install
  if [ "$?" != 0 ]; then errors+=('brew engtools install'); fi
  (( total_tasks++ ))

  # OSS repos
  # (because git is routed over the VPN, ugh)

  echo "Dotfiles"
  cd "$HOME/src/gh/dotfiles/"
  # pull, rebase, push to sync anything I've changed recently
  # and install any updated dependencies
  gpr && gp && cd scripts/ && yarn install
  if [ "$?" != 0 ]; then errors+=('dotfiles - pull, rebase, push, install deps'); fi
  (( total_tasks++ ))

  echo "Badash"
  cd "/usr/local/lib/badash/"
  # just pull and rebase, to stay current with master
  gpr
  if [ "$?" != 0 ]; then errors+=('badash - pull and rebase'); fi
  (( total_tasks++ ))

  # LI repos

  echo "Voyager Web"
  cd "$HOME/src/li/voyager-web_trunk/"
  # if not on the master branch, checkout master, pull, and rebase
  # TODO: figure out the default branch name
  branch_name="$(current_git_branch)"
  # TODO: check for "main" as well?
  if [ "$branch_name" != "master" ]; then
    gc master
    # pull and rebase from master
    gpr
    if [ "$?" != 0 ]; then errors+=('voyager-web - pull and rebase'); fi
    (( total_tasks++ ))
    # go back to the original branch
    gc "$branch_name"
  else
    # otherwise, we are on master, so just pull and rebase
    gpr
    if [ "$?" != 0 ]; then errors+=('voyager-web - pull and rebase'); fi
    (( total_tasks++ ))
  fi

  echo "Blog"

  cd "$HOME/src/li/blog/"
  # if not on the master branch, checkout master, pull, and rebase
  # TODO: figure out the default branch name
  branch_name="$(current_git_branch)"
  # TODO: check for "main" as well?
  if [ "$branch_name" != "master" ]; then
    gc master
    # pull and rebase from master
    gpr
    if [ "$?" != 0 ]; then errors+=('blog - pull and rebase'); fi
    (( total_tasks++ ))
    # go back to the original branch
    gc "$branch_name"
  else
    # otherwise, we are on master, so just pull and rebase
    gpr
    if [ "$?" != 0 ]; then errors+=('blog - pull and rebase'); fi
    (( total_tasks++ ))
  fi

  # TODO: any more repos?

  # list of blog post ideas, and posts I'm working on
  open https://docs.google.com/document/d/1XQskTjmpzn7-SI7B4e0aNYy3gLE5lTfb9IC67rPN53c/edit#
fi

if [ "$machine" == "Work VM" ]
then
  echo "Engtools"

  # this prompts for my password
  sudo yum install usr-local-linkedin-dist
  if [ "$?" != 0 ]; then errors+=('yum install usr-local-linkedin-dist'); fi
  (( total_tasks++ ))

  # OSS repos

  echo "Dotfiles"
  cd "$HOME/src/gh/dotfiles/"
  # pull, rebase, push to sync anything I've changed recently
  # and install any updated dependencies
  gpr && gp && cd scripts/ && yarn install
  if [ "$?" != 0 ]; then errors+=('dotfiles - pull, rebase, push, install deps'); fi
  (( total_tasks++ ))

  echo "Badash"
  cd "/usr/local/lib/badash/"
  # just pull and rebase, to stay current with master
  gpr
  if [ "$?" != 0 ]; then errors+=('badash - pull and rebase'); fi
  (( total_tasks++ ))

  # LI repos

  echo "Voyager Web"
  cd "$HOME/src/li/voyager-web_trunk/"
  # if not on the master branch, checkout master, pull, and rebase
  # TODO: figure out the default branch name
  branch_name="$(current_git_branch)"
  # TODO: check for "main" as well?
  if [ "$branch_name" != "master" ]; then
    gc master
    # pull and rebase from master
    gpr
    if [ "$?" != 0 ]; then errors+=('voyager-web - pull and rebase'); fi
    (( total_tasks++ ))
    # go back to the original branch
    gc "$branch_name"
  else
    # otherwise, we are on master, so just pull and rebase
    gpr
    if [ "$?" != 0 ]; then errors+=('voyager-web - pull and rebase'); fi
    (( total_tasks++ ))
  fi
fi

# moments garden stuff
# if [[ "$machine" =~ Laptop ]]
# then
#   echo "Moment Garden"
#   @wait-for-command moment-garden-download
#   if [ "$?" != 0 ]; then errors+=('moment-garden-download'); fi
#   (( total_tasks++ ))
# fi

# check free disk space

echo ""
echo "Free Disk Space"

(( total_tasks++ ))
if [[ "$machine" =~ Laptop ]]
then
  percentage="$(df -h | grep /System/Volumes/Data$ | awk '{ print $5 }')"
else
  # this works on the VM...
  percentage="$(df -h | grep ' /$' | awk '{ print $5 }')"
fi
percent="$( [[ "$percentage" =~ ^([0-9]+)% ]] && echo "${BASH_REMATCH[1]}" )"
if [ -z "$percent" ] || [ "$percent" -le 80 ]
then
  echo "✅ $percentage"
else
  echo "❌ $percentage"
  errors+=('free disk space')
fi


# TODO: people I should reach out to every couple days, or week, or month, etc.
# (ex. cflor)

# show a quote of the day
echo ""
echo "Quote of the day:"
quote-of-the-day

# show something to remember
echo ""
remember

# show upcoming dates
echo ""
upcoming-dates
echo ""

# stats

echo ""
echo "Ran ${total_tasks} task(s)"

# display any errors encountered
if [ "${#errors[@]}" -gt 0 ]
then
  echo_err ""
  echo_err "There were ${#errors[@]} error(s):"
  for error in "${errors[@]}"
  do
    echo_err "$error"
  done
else
  echo "(no errors)"
fi

# clean up any stray stuff on stdin (from pasting in passwords, etc.)
cleaned_up_lines=0
while read -t 1 -n 1024 discard
do
  (( cleaned_up_lines++ ))
done
if [ "$cleaned_up_lines" > 0 ]
then
  echo "(cleaned up $cleaned_up_lines stray input lines)"
fi

# end on a happy note
echo_ack ""
echo_ack "Good Morning!"
echo_ack ""
if [ "$machine" == "Work Laptop" ]
then
  imgcat /usr/local/SyncThing/SyncImages/coffee.jpg
elif [ "$machine" == "Home Laptop" ]
then
  imgcat "$HOME/SyncImages/coffee.jpg"
fi
