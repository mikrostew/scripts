#!/usr/bin/env badash
# Automatically do things that I used to do manually every morning

COLOR_FG_BOLD_BLUE='\033[1;34m'
COLOR_FG_BOLD_GREEN='\033[1;32m'
COLOR_FG_GREEN='\033[0;32m'
COLOR_FG_RED='\033[0;31m'
COLOR_RESET='\033[0m'

# collect stats, and display at the end
total_tasks=0
errors=()

current_git_branch () {
  git rev-parse --abbrev-ref HEAD
}
echo_ack () {
  echo -e "${COLOR_FG_GREEN}$@${COLOR_RESET}" 1>&2
}
echo_err () {
  echo -e "${COLOR_FG_RED}$@${COLOR_RESET}" 1>&2
}

# different things for different machines
HOST_NAME="$(hostname)"
if [[ "$HOST_NAME" =~ MacBook-Air ]] || [[ "$HOST_NAME" =~ Michaels-Air ]]
then
  machine="Home Laptop"
elif [[ "$HOST_NAME" =~ mistewar-mn ]]
then
  machine="Work Laptop"
elif [[ "$HOST_NAME" =~ mistewar-ld ]]
then
  machine="Work VM"
else
  echo_err "Machine '$HOST_NAME' has not been configured for this script"
  exit 1
fi
echo ""
echo -e "Running for '${COLOR_FG_BOLD_BLUE}$machine${COLOR_RESET}' ($HOST_NAME)"
echo ""

# some things need a password, so do that first
# if [ "$machine" == "Work Laptop" ]
# then
#   echo "(this will probably prompt for password input)"
#   ldap_pass="$(security find-generic-password -ga ldap_pass -w)"
#   if [ -z "$ldap_pass" ]
#   then
#     echo_err "Unable to get LDAP password - you will be prompted for that later..."
#   fi
# fi

# if [[ "$machine" =~ Laptop ]]
# then
#   echo "Xcode"
#   (( total_tasks++ ))
#   # make sure xcodebuild is using the full Xcode install, instead of just command line tools
#   xcode_path="$(xcode-select --print-path)"
#   if [ "$xcode_path" != "/Applications/Xcode.app/Contents/Developer" ]
#   then
#     send-passwd-for-sudo "$ldap_pass" sudo xcode-select -s "/Applications/Xcode.app/Contents/Developer"
#     xcode_path="$(xcode-select --print-path)"
#     if [ "$xcode_path" != "/Applications/Xcode.app/Contents/Developer" ]
#     then
#       echo "❌ $xcode_path"
#     else
#       echo "✅ $xcode_path"
#     fi
#   else
#     echo "✅ $xcode_path"
#   fi
# fi

# start transitioning tasks here
good-morning-tasks.ts

# if [ "$machine" == "Work Laptop" ]
# then
#   # list of blog post ideas, and posts I'm working on
#   open https://docs.google.com/document/d/1XQskTjmpzn7-SI7B4e0aNYy3gLE5lTfb9IC67rPN53c/edit#
# fi

# TODO: people I should reach out to every couple days, or week, or month, etc.
# (ex. cflor)

# show upcoming dates
echo ""
upcoming-dates
echo ""

# show current priorities
echo ""
current-priorities
echo ""


# stats

echo ""

# display any errors encountered
if [ "${#errors[@]}" -gt 0 ]
then
  echo_err ""
  echo_err "${total_tasks} tasks, with ${#errors[@]} error(s):"
  for error in "${errors[@]}"
  do
    echo_err "$error"
  done
else
  echo "(${total_tasks} tasks, no errors)"
fi

# clean up any stray stuff on stdin (from pasting in passwords, etc.)
cleaned_up_lines=0
while read -t 1 -n 1024 discard
do
  (( cleaned_up_lines++ ))
done
if [ "$cleaned_up_lines" -gt 0 ]
then
  echo_err "(cleaned up $cleaned_up_lines stray input lines)"
fi

# reminders

if [ "$machine" == "Work Laptop" ]
then
  # only need to setup Slack in work mornings
  echo ""
  echo "Reminders"
  echo " - setup your Slack status now!"
fi

# end on a happy note
echo_ack ""
echo_ack "Good Morning!"
echo_ack ""
