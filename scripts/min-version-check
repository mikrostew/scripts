#!/usr/bin/env bash

# Check minimum version, and print out the result

COLOR_FG_RED='\033[0;31m'
COLOR_RESET='\033[0m'

echo_err ()
{
    echo -e "${COLOR_FG_RED}$*${COLOR_RESET}" 1>&2
}
show_help_msg() {
  echo "min-version-check - Check minimum version, and print out the result"
  echo 'Usage: min-version-check [options] executable_name version_specifier version_cmd install_cmd [install_path]'
  echo ''
  echo 'Options:'
  echo '  -h                  Show this help message'
  echo ''
  echo 'Arguments:'
  echo '  version_specifier   Semver range to match against'
  echo '  install_cmd         Command the user can run to install the executable'
  echo '  version_cmd         How to get the version of the executable (NOTE: will be eval-ed)'
  # shellcheck disable=SC2016
  echo '  install_path        (optional) Path to the executable to use instead of `which` (NOTE: will be eval-ed) (defaults to "")'
  echo '  executable_name     Executable that is being checked'
}

while getopts ":h" opt
do
  case $opt in
    h)
      show_help_msg && exit 0
      ;;
    \?)
      echo_err "$0: invalid option '-$OPTARG'"
      exit 1
      ;;
    :)
      echo_err "$0: option '-$OPTARG' requires an argument"
      exit 1
      ;;
  esac
done
shift $((OPTIND-1))

executable_name="${1:?Missing argument \'executable_name\'}"
version_specifier="${2:?Missing argument \'version_specifier\'}"
version_cmd="${3:?Missing argument \'version_cmd\'}"
install_cmd="${4:?Missing argument \'install_cmd\'}"
install_path="${5:-}"

@uses-cmds semver

# convert versions to X.X.X format
normalize_version() {
  if [[ "$1" =~ ^[0-9]+$ ]]; then
    echo "$1.0.0"
  elif [[ "$1" =~ ^[0-9]+\.[0-9]+$ ]]; then
    echo "$1.0"
  elif [[ "$1" =~ ^[0-9]+\.[0-9]+\.[0-9]+ ]]; then
    # there may be some junk after the version (looking at you bash), get rid of that
    # shellcheck disable=SC2128
    echo "$BASH_REMATCH"
  else
    echo "$1"
  fi
}

# compare input semver with input constraint
# (using semver from NPM for this - https://github.com/npm/node-semver)
# $1 - program version (semver format)
# $2 - version range (semver format)
meets_version() {
  semver --range "$2" "$1" >/dev/null
}

# check if this is installed
if [ -n "$install_path" ]; then
  install_path=$(eval "$install_path")
else
  install_path=$(which "$executable_name")
fi

if [ -z "$install_path" ]; then
  echo -e "$executable_name : ${COLOR_FG_RED}not installed (want $version_specifier), install with '${install_cmd:-(unknown command)}'${COLOR_RESET}"
  exit 1
fi

# check the minimum version
current_version=$(eval "$version_cmd")
if [ -n "$current_version" ]; then
  if meets_version "$(normalize_version "$current_version")" "$version_specifier"; then
    # don't print anything for this
    exit 0
  else
    echo -e "$executable_name : ${COLOR_FG_RED}found $current_version (want $version_specifier)${COLOR_RESET} ($install_path)"
  fi
else
  echo -e "$executable_name : ${COLOR_FG_RED}unknown version (want $version_specifier)${COLOR_RESET} ($install_path)"
fi
exit 1 # if it hasn't already exited, it didn't meet the version
