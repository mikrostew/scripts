#!/usr/bin/env bash
# Create a new desktop (Space) with Mission Control, and switch to it

# NOTE: enable reduced motion so the animations have less affect on the timing
# System Preferences > Accessibility > Display > Reduce Motion [âœ“]

########################################
# figure out how many desktops there are now
########################################

# NOTE: I previously tried to adapt https://stackoverflow.com/a/6783652, and parse the output of `defaults read com.apple.spaces`,
#       but that was brittle and hacky
# NOTE: Also, apparently when this is run via Karabiner, the `jq` command cannot be found, so I'm using the full path here

# use plutil to convert to json, and jq to parse that and count the current number of spaces
# (uncomment these lines to get some debugging info in a logfile)
#plutil -convert json -o - "$HOME/Library/Preferences/com.apple.spaces.plist" | /usr/local/bin/jq '.' >> "$HOME/new-desktop.log" 2>&1
#echo "status: $?" >> "$HOME/new-desktop.log"

# find the .Monitors section with ."Display Identifier" == "Main", and count the number of spaces
current_desktops="$(plutil -convert json -o - "$HOME/Library/Preferences/com.apple.spaces.plist" | /usr/local/bin/jq '.SpacesDisplayConfiguration."Management Data".Monitors[] | if ."Display Identifier" == "Main" then .Spaces else empty end | length')"

echo "Currently, there are $current_desktops desktops"

########################################
# get into Mission Control
########################################

# NOTE: not using this anymore, because it doesn't consistently work:
# control-uparrow to get into mission control
#osascript -e 'tell application "System Events" to key code 126 using control down'

# just run the app directly
"/Applications/Mission Control.app/Contents/MacOS/Mission Control"

# give that time to animate
sleep 0.5

########################################
# add a new desktop
########################################

# this is not working (shows "missing value")
# from https://apple.stackexchange.com/a/180729 and https://apple.stackexchange.com/a/234640
#osascript -e 'tell application "System Events" to click (every button whose value of attribute "AXDescription" is "add desktop") of group 1 of process "Dock"'

# this works, but I don't understand how
# from https://apple.stackexchange.com/a/281460
#osascript -e 'tell application "System Events" to click (every button whose value of attribute "AXDescription" is "add desktop") of group 2 of group 1 of group 1 of process "Dock"'

# this is probably how they figured that out:
# from https://www.reddit.com/r/applescript/comments/360l6v/close_a_space_with_applescript/cr9tj4j/
#
# osascript <<END_SCRIPT
# tell application "System Events"
#     groups of process "Dock"
# end tell
# END_SCRIPT
#
# which returns "group Mission Control of application process Dock"
# so there's only one group, let's get the info on that
#
# osascript <<END_SCRIPT
# tell application "System Events"
#     properties of (group 1 of process "Dock")
# end tell
# END_SCRIPT
#
# returns:
# minimum value:missing value, orientation:missing value, position:-2560, 0, class:group, accessibility description:missing value, role description:group, focused:true, title:missing value, size:4240, 1440, help:missing value, entire contents:, enabled:missing value, maximum value:missing value, role:AXGroup, value:missing value, subrole:missing value, selected:missing value, name:Mission Control, description:group
#
# does that have buttons?
#
# osascript <<END_SCRIPT
# tell application "System Events"
#     buttons of (group 1 of process "Dock")
# end tell
# END_SCRIPT
#
# no, that returns an empty string
# let's get the groups in that group then
#
# osascript <<END_SCRIPT
# tell application "System Events"
#     groups of (group 1 of process "Dock")
# end tell
# END_SCRIPT
#
# returns:
# group 1 of group Mission Control of application process Dock, group 2 of group Mission Control of application process Dock
#
# osascript <<END_SCRIPT
# tell application "System Events"
#     properties of (group 1 of group 1 of process "Dock")
# end tell
# END_SCRIPT
#
# nothing helpful, this is probably the group containing the button to add a new desktop
#
# osascript <<END_SCRIPT
# tell application "System Events"
#     groups of (group 1 of group 1 of process "Dock")
# end tell
# END_SCRIPT
#
# there we go, "group 1 of ..., group Spaces Bar of group 1 of group Mission Control of application process Dock"
# that looks like the thing we want
#
# osascript <<END_SCRIPT
# tell application "System Events"
#     buttons of (group "Spaces Bar" of group 1 of group "Mission Control" of process "Dock")
# end tell
# END_SCRIPT
#
# returns "button 1 of group Spaces Bar of group 1 of group Mission Control of application process Dock"
#
# osascript <<END_SCRIPT
# tell application "System Events"
#     properties of (button 1 of group "Spaces Bar" of group 1 of group "Mission Control" of process "Dock")
# end tell
# END_SCRIPT
#
# there we go:
# minimum value:missing value, orientation:missing value, position:-104, -136, class:button, accessibility description:add desktop, role description:button, focused:false, title:missing value, size:176, 176, help:missing value, entire contents:, enabled:missing value, maximum value:missing value, role:AXButton, value:missing value, subrole:missing value, selected:missing value, name:missing value, description:add desktop
#
# so AXDescription is probably "accessibility description"

echo "Adding a new desktop..."

# all that to click this button:
osascript <<END_SCRIPT
tell application "System Events"
    click (first button whose value of attribute "AXDescription" is "add desktop") of group "Spaces Bar" of group 1 of group "Mission Control" of process "Dock"
end tell
END_SCRIPT

# give that time to animate
sleep 0.5

########################################
# switch to the newest desktop
########################################

newest_desktop=$(( current_desktops + 1 ))

echo "Switching to desktop $newest_desktop..."

# key code reference:
# https://eastmanreference.com/complete-list-of-applescript-key-codes
# (have to use key code in mission control)
# NOTE: have to set the mission control keyboard shortcuts in system preferences

case $newest_desktop in
  1) key_code=18;;
  2) key_code=19;;
  3) key_code=20;;
  4) key_code=21;;
  5) key_code=23;;
  6) key_code=22;;
  7) key_code=26;;
  8) key_code=28;;
  *) key_code=125;; # down arrow (or this could be Esc I guess)
esac

# go to the new desktop
# (or just get out of mission control if there are more than 8 desktops)
osascript <<ENDSCRIPT
tell application "System Events" to key code $key_code using control down
ENDSCRIPT

# give that time to animate
sleep 0.5

########################################
# get out of Mission Control
########################################

# then escape to get out of mission control
osascript -e 'tell application "System Events" to key code 53'

