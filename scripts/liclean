#!/usr/bin/env bash
###########################################################################
# DO NOT EDIT! This script was auto-generated. To update this script, edit
# the file script-gen/liclean, and run './generate-scripts.sh'
###########################################################################

COLOR_FG_BOLD_BLUE='\033[1;34m'
COLOR_FG_GREEN='\033[0;32m'
COLOR_FG_RED='\033[0;31m'
COLOR_RESET='\033[0m'
echo_err ()
{
    echo -e "${COLOR_FG_RED}$@${COLOR_RESET}" 1>&2
}
do_cmd ()
{
    echo -en "${COLOR_FG_GREEN}( " 1>&2;
    for arg in "$@";
    do
        case "$arg" in
            *\ *)
                echo -n "\"$arg\" "
            ;;
            *)
                echo -n "$arg "
            ;;
        esac;
    done;
    echo -e ")${COLOR_RESET}" 1>&2;
    command "$@"
}
echo_info ()
{
    echo -e "${COLOR_FG_BOLD_BLUE}$@${COLOR_RESET}" 1>&2
}
in_linkedin_mp() {
  local file_to_check="product-spec.json"
  [ -f "$file_to_check" ] && return 0 || echo_err "$(pwd) is not a LinkedIn MultiProduct (missing $file_to_check)" && return -1
}
show_usage() {
  echo_err "Usage:"
  echo_err "  ${0##*/} <new-branch-name>"
}
if in_linkedin_mp; then
  username="$(whoami)"
  if [ -n "$TMPDIR" ]; then
    disk_cache_dir="$TMPDIR/$username"
  else
    using_just="$(just node -e 'console.log(require("os").tmpdir())' | sed -e '/^[[:space:]]*#/d')"
    using_system="$(node -e 'console.log(require("os").tmpdir())' 2>/dev/null)"
    if [ -n "$using_just" ]; then
      disk_cache_dir="$using_just/$username"
    elif [ -n "$using_system" ]; then
      disk_cache_dir="$using_system/$username"
    else
      echo_err "could not figure out tmp directory"
    fi
  fi
  echo_info "removing build files..."
  do_cmd rm -rf .eyeglass_cache/ build/ dist/ tmp/
  if [ -n "$disk_cache_dir" ]; then
    echo_info "removing disk cache files..."
    do_cmd rm -rf "$disk_cache_dir"
  fi
fi
