#!/usr/bin/env badash
# shellcheck shell=bash

# Clean dirs and files in a MP (for LinkedIn workflow)

# how to use this:
#  $ liclean

# colors
COLOR_FG_BOLD_BLUE='\033[1;34m'
COLOR_FG_RED='\033[0;31m'
COLOR_RESET='\033[0m'

# imported functions
echo_err ()
{
    echo -e "${COLOR_FG_RED}$*${COLOR_RESET}" 1>&2
}
echo_info ()
{
    echo -e "${COLOR_FG_BOLD_BLUE}$*${COLOR_RESET}" 1>&2
}
show_help_msg() {
  echo "liclean - Clean dirs and files in a MP (for LinkedIn workflow)"
  echo 'Usage: liclean [options]'
  echo ''
  echo 'Options:'
  echo '  -h               Show this help message'
}
while getopts ":h" opt
do
  case $opt in
    h)
      show_help_msg && exit 0
      ;;
    \?)
      echo_err "$0: invalid option '-$OPTARG'"
      exit 1
      ;;
    :)
      echo_err "$0: option '-$OPTARG' requires an argument"
      exit 1
      ;;
  esac
done
shift $((OPTIND-1))

in_linkedin_mp() {
  local file_to_check="product-spec.json"
  [ -f "$file_to_check" ] && return 0 || echo_err "$(pwd) is not a LinkedIn MultiProduct (missing $file_to_check)" && return 1
}

if in_linkedin_mp; then
  username="$(whoami)"

  if [ -n "$TMPDIR" ]; then
    # $TMPDIR is set on OSX
    disk_cache_dir="$TMPDIR/$username"
  else
    # try to determine the tmpdir used by node
    # using node in the MP:
    # (have to filter out the junk printed by just)
    using_just="$(just node -e 'console.log(require("os").tmpdir())' | sed -e '/^[[:space:]]*#/ d')"
    # using system node:
    using_system="$(node -e 'console.log(require("os").tmpdir())' 2>/dev/null)"
    if [ -n "$using_just" ]; then
      disk_cache_dir="$using_just/$username"
    elif [ -n "$using_system" ]; then
      disk_cache_dir="$using_system/$username"
    else
      echo_err "could not figure out tmp directory"
    fi
  fi

  # stop any processes that have not been properly cleaned up
  echo_info "stopping stray processes..."
  @wait-for-command killall node ember java

  # default: remove build products and disk_cache
  echo_info "removing build files..."
  @wait-for-command rm -rf .eyeglass_cache/ build/ dist/ tmp/ logs/*.log

  if [ -n "$disk_cache_dir" ]; then
    echo_info "removing disk cache files..."
    @wait-for-command rm -rf "$disk_cache_dir"
  fi
fi
