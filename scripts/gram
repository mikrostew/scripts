#!/usr/bin/env bash
###########################################################################
# DO NOT EDIT! This script was auto-generated. To update this script, edit
# the file script-gen/gram, and run './generate-scripts.sh'
###########################################################################
#efe592ada6a0948ae2fd8a66e3e6c53e

COLOR_FG_BOLD_BLUE='\033[1;34m'
COLOR_FG_GREEN='\033[0;32m'
COLOR_FG_RED='\033[0;31m'
COLOR_RESET='\033[0m'
current_git_branch ()
{
    echo "$(git rev-parse --abbrev-ref HEAD)"
}
do_cmd ()
{
    local cmd_args="";
    for arg in "$@";
    do
        case "$arg" in
            *\ *)
                cmd_args="$cmd_args \"$arg\""
            ;;
            *)
                cmd_args="$cmd_args $arg"
            ;;
        esac;
    done;
    echo -e "${COLOR_FG_GREEN}($cmd_args )${COLOR_RESET}" 1>&2;
    command "$@"
}
do_git ()
{
    do_cmd git "$@"
}
echo_err ()
{
    echo -e "${COLOR_FG_RED}$@${COLOR_RESET}" 1>&2
}
echo_info ()
{
    echo -e "${COLOR_FG_BOLD_BLUE}$@${COLOR_RESET}" 1>&2
}
gmt ()
{
    do_git mergetool --tool=opendiff
}
grmorig ()
{
    do_git ls-files --others --exclude-standard | do_cmd grep \.orig$ | do_cmd xargs rm -v
}
in_git_repo ()
{
    git status > /dev/null && return 0 || echo_err "Not in git repo" && return 1
}
no_uncommitted_changes ()
{
    [ "$(git status --porcelain --untracked-files=no)" != "" ] && echo_err ">_<  You have uncommitted changes" && return -1 || return 0
}
not_on_git_branch ()
{
    [ "$(current_git_branch)" == "$1" ] && echo_err ">_<  Doesn't work on branch '$1'" && return -1 || return 0
}
requirement_check ()
{
    local cmd="$1";
    local how_to_install="$2";
    if [ ! $(command -v $cmd) ]; then
        echo_err "[ERROR] Command '$cmd' is required for this script, but not installed";
        echo_err "To install: $how_to_install";
        return 1;
    else
        return 0;
    fi
}
show_help_msg() {
  echo "gram - [git] Rebase current branch against master (Git Rebase Against Master)"
  echo 'Usage: gram [options]'
  echo ''
  echo 'Options:'
  echo '  -h               Show this help message'
}
while getopts ":h" opt
do
  case $opt in
    h)
      show_help_msg && exit 0
      ;;
    \?)
      echo_err "$0: invalid option '-$OPTARG'"
      exit 1
      ;;
    :)
      echo_err "$0: option '-$OPTARG' requires an argument"
      exit 1
      ;;
  esac
done
shift $((OPTIND-1))
combined_return=0
requirement_check gpr "search 'how to install gpr'"
combined_return=$(( combined_return + $? ))
requirement_check git "search 'how to install git'"
combined_return=$(( combined_return + $? ))
if [ "$combined_return" != 0 ]; then exit $combined_return; fi
if in_git_repo && not_on_git_branch 'master' && no_uncommitted_changes
then
  branch_name=$(current_git_branch)
  need_to_remove_orig_files='no'
  do_git checkout master && gpr
  exit_code="$?"
  if [ "$exit_code" -ne 0 ]
  then
    echo -e "${COLOR_FG_RED}Failed to pull and rebase master${COLOR_RESET}" >&2
    do_git checkout "$branch_name"
    exit "$exit_code"
  fi
  do_git checkout "$branch_name" && do_git rebase master
  while [ "$?" -ne 0 ]; do
    read -p "Press any key to continue... " -n1 -s # DEBUG
    need_to_remove_orig_files='yes'
    gmt && do_git rebase --continue
  done
  if [ "$need_to_remove_orig_files" == 'yes' ]; then
    echo_info "Cleaning up .orig files from merge conflicts..."
    grmorig
  fi
fi
