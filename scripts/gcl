#!/usr/bin/env badash
###########################################################################
# DO NOT EDIT! This script was auto-generated. To update this script, edit
# the file ~/dotfiles/script-gen/gcl, and run 'generate-scripts.sh'
###########################################################################
#e7b8ed335d7f1aa59718f00dca325378

COLOR_FG_BOLD_BLUE='\033[1;34m'
COLOR_FG_GREEN='\033[0;32m'
COLOR_FG_RED='\033[0;31m'
COLOR_RESET='\033[0m'
all_git_branches ()
{
    git for-each-ref --format="%(refname)" refs/heads/ | sed 's|refs/heads/||'
}
do_cmd ()
{
    local cmd_args="";
    for arg in "$@";
    do
        case "$arg" in
            *\ *)
                cmd_args="$cmd_args \"$arg\""
            ;;
            *)
                cmd_args="$cmd_args $arg"
            ;;
        esac;
    done;
    echo -e "${COLOR_FG_GREEN}($cmd_args )${COLOR_RESET}" 1>&2;
    command "$@"
}
do_git ()
{
    do_cmd git "$@"
}
echo_err ()
{
    echo -e "${COLOR_FG_RED}$@${COLOR_RESET}" 1>&2
}
echo_info ()
{
    echo -e "${COLOR_FG_BOLD_BLUE}$@${COLOR_RESET}" 1>&2
}
in_git_repo ()
{
    git status > /dev/null && return 0 || echo_err "Not in git repo" && return 1
}
show_help_msg() {
  echo "gcl - [git] Checkout git branch from list of branches (Git Checkout from List)"
  echo 'Usage: gcl [options]'
  echo ''
  echo 'Options:'
  echo '  -h               Show this help message'
}
while getopts ":h" opt
do
  case $opt in
    h)
      show_help_msg && exit 0
      ;;
    \?)
      echo_err "$0: invalid option '-$OPTARG'"
      exit 1
      ;;
    :)
      echo_err "$0: option '-$OPTARG' requires an argument"
      exit 1
      ;;
  esac
done
shift $((OPTIND-1))
if in_git_repo
then
  all_branches=( $(all_git_branches | sort) )
  num_branches="${#all_branches[@]}"
  for((i=0; i<$num_branches; i++))
  do
    echo -e "[$(( i + 1 ))] ${all_branches[$i]}"
  done
  echo -n "Branch number: "
  read branch_num
  if [ -n "$branch_num" ] && (( "$branch_num" <= "$num_branches" ))
  then
    (( branch_index = branch_num - 1 ))
    do_git checkout "${all_branches[$branch_index]}"
  else
    echo_info "no branch selected"
  fi
fi
