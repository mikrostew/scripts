#!/usr/bin/env badash
# shellcheck shell=bash

# [git] Initialize a repo with README, LICENSE, and maybe origin (Git Init)

COLOR_FG_BOLD_BLUE='\033[1;34m'
COLOR_RESET='\033[0m'

echo_info ()
{
  echo -e "${COLOR_FG_BOLD_BLUE}$*${COLOR_RESET}" 1>&2
}
show_help_msg() {
  echo "ginit - [git] Initialize a repo with README, LICENSE, and maybe origin (Git Init)"
  echo 'Usage: ginit [options] repo_name [repo_origin]'
  echo ''
  echo 'Options:'
  echo '  -h               Show this help message'
  echo ''
  echo 'Arguments:'
  echo '  repo_origin      (optional) Optional URL of origin (usually on github) (defaults to "")'
  echo '  repo_name        The name of the repository'
}
while getopts ":h" opt
do
  case $opt in
    h)
      show_help_msg && exit 0
      ;;
    \?)
      @echo-err "$0: invalid option '-$OPTARG'"
      exit 1
      ;;
    :)
      @echo-err "$0: option '-$OPTARG' requires an argument"
      exit 1
      ;;
  esac
done
shift $((OPTIND-1))

# arguments
repo_name="${1:?Missing argument \'repo_name\'}"
repo_origin="${2:-}"

@uses-cmds curl jq

#my_username="mikrostew"
my_name="Michael Stewart"
github_license_api="https://api.github.com/licenses"

current_year="$(date +%Y)"

# Open Source Licenses, from https://api.github.com/licenses

tmp_licenses_json_file="$(mktemp "$TMPDIR/licenses-json.XXXXXX")"
@wait-for-command --show-output curl -sSLf "$github_license_api" > "$tmp_licenses_json_file"
# shellcheck disable=SC2016
@exit-on-error 'API call failed' 'echo "JSON output: $(cat $tmp_licenses_json_file)"'

# put license info into arrays
readarray -t license_names <<< "$(jq -r '.[] | .name' < "$tmp_licenses_json_file" )"
readarray -t license_urls <<< "$(jq -r '.[] | .url' < "$tmp_licenses_json_file" )"
rm "$tmp_licenses_json_file"
num_licenses="${#license_names[@]}"

echo_info "Got $num_licenses licenses from $github_license_api"

# create the directory for the repository, and CD into it
@wait-for-command mkdir -p "$repo_name"
cd "$repo_name" || exit

# initialize the repo for git
@wait-for-command git init
@git-default-branch default_branch

# initialize the README with "# repo" at the top
echo "# $repo_name" > README.md
@wait-for-command git add README.md

# choose a license

echo ""
echo "Choose a license:"
echo "(When working with a specific community, see https://choosealicense.com/community/)"
echo ""

for(( i = 0; i < num_licenses; i++ ))
do
  # dislplay a 1-based index, which is nicer to select
  echo -e "[$(( i + 1 ))] ${license_names[$i]}"
done

echo ""
echo -n "Selection [Enter for none]: "

read -r item_num
if [ -n "$item_num" ] && (( "$item_num" <= "$num_licenses" ))
then
  (( item_index = item_num - 1 ))
  license_name="${license_names[$item_index]}"
  license_url="${license_urls[$item_index]}"
  echo_info "Selected $license_name"

  # get text of the license
  tmp_license_info_file="$(mktemp "$TMPDIR/license-info.XXXXXX")"
  @wait-for-command --show-output curl -sSLf "$license_url" > "$tmp_license_info_file"
  # shellcheck disable=SC2016
  @exit-on-error 'API call failed' 'echo "JSON output: $(cat $tmp_license_info_file)"'

  # save the license text in the LICENSE file
  jq -r '.body' < "$tmp_license_info_file" | sed -e "s/\[year\]/$current_year/" -e "s/\[fullname\]/$my_name/" > LICENSE
  @wait-for-command git add LICENSE
else
  echo_info "(no license selected)"
fi

# show what will be committed
echo ""
echo "What will be committed:"
@wait-for-command --show-output git diff --cached --color

echo -n "Confirm commit [Y/n]: "
read -r confirm
if [ -z "$confirm" ] || [ "$confirm" == "Y" ] || [ "$confirm" == "y" ]
then
  @wait-for-command git commit -m "initial setup"

  # push changes to origin if it was specified on the command line
  if [ -n "$repo_origin" ]
  then
    @wait-for-command git remote add origin "$repo_origin"
    @wait-for-command git push -u origin "$default_branch"
  fi
else
  echo_info "(not committing)"
fi
