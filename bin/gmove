#!/usr/bin/env badash
# shellcheck shell=bash

# [git] Move recent commits from main/master to a new branch (Git Move)

COLOR_FG_BOLD_BLUE='\033[1;34m'
COLOR_RESET='\033[0m'

commit_diff_on_branch ()
{
    local git_rev_list_origin
    git_rev_list_origin="$(git rev-list --count --left-right "$1"..."$2" 2>/dev/null)"
    # shellcheck disable=SC2181
    if [ "$?" -eq 0 ] && [ -n "$git_rev_list_origin" ]; then
        local git_origin_arr
        mapfile -t git_origin_arr <<< "$git_rev_list_origin"
        echo "${git_origin_arr[0]}";
    else
        echo "0"
    fi
}
current_git_branch ()
{
    git rev-parse --abbrev-ref HEAD
}
echo_info ()
{
    echo -e "${COLOR_FG_BOLD_BLUE}$*${COLOR_RESET}" 1>&2
}
in_git_repo ()
{
    git status > /dev/null && return 0 || @echo-err "Not in git repo" && return 1
}
on_git_branch ()
{
    [ "$(current_git_branch)" != "$1" ] && @echo-err ">_<  Must be on branch '$1' for this" && return 1 || return 0
}
show_help_msg() {
  echo "gmove - [git] Move recent commits from main/master to a new branch (Git Move)"
  echo 'Usage: gmove [options] new_branch_name'
  echo ''
  echo 'Options:'
  echo '  -h                Show this help message'
  echo ''
  echo 'Arguments:'
  echo '  new_branch_name   Name of the new branch to move the commits to'
}

while getopts ":h" opt
do
  case $opt in
    h)
      show_help_msg && exit 0
      ;;
    \?)
      @echo-err "$0: invalid option '-$OPTARG'"
      exit 1
      ;;
    :)
      @echo-err "$0: option '-$OPTARG' requires an argument"
      exit 1
      ;;
  esac
done
shift $((OPTIND-1))

new_branch_name="${1:?Missing argument \'new_branch_name\'}"

if in_git_repo
then
  @git-default-branch default_branch

  if on_git_branch "$default_branch"
  then
    num_commits="$(commit_diff_on_branch "$default_branch" "origin/$default_branch")"
    if [ "$num_commits" == "0" ]
    then
      echo_info "No commits to move"
      exit 1
    fi
    echo_info "${num_commits} commit(s) will be moved to branch '$new_branch_name'"
    echo -n "Confirm moving these commits [Y/n]: "
    read -r confirm
    if [ -z "$confirm" ] || [ "$confirm" == "Y" ] || [ "$confirm" == "y" ]
    then
      # (see http://stackoverflow.com/a/22654961 for details)
      @wait-for-command git checkout -b "$new_branch_name" && @wait-for-command git branch -f "$default_branch" "HEAD~${num_commits}" && @wait-for-command git branch -u "origin/$default_branch" "$new_branch_name"
    else
      echo_info "Not moving commits"
    fi
  fi
fi
