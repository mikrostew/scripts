#!/usr/bin/env badash
# shellcheck shell=bash

# lint the input scripts, based on the shebang

# trim whitespace
# (https://stackoverflow.com/a/3352015)
trim() {
  local var="$1"
  # remove leading whitespace characters
  var="${var#"${var%%[![:space:]]*}"}"
  # remove trailing whitespace characters
  var="${var%"${var##*[![:space:]]}"}"
  printf '%s' "$var"
}

errors=0

# input files are command line args

# first group the files by type, using their shebang
shellcheck_files=()
eslint_files=()
rubocop_files=()

for file in "$@"; do
  read -r firstline <"$file"
  shebang=$(trim "$firstline")
  #echo "file: $file, shebang: '$shebang'"

  case "$shebang" in
    "#!/usr/bin/env bash"|"#!/usr/bin/env badash")
      shellcheck_files+=( "$file" )
      ;;
    "#!/usr/bin/env node"|"#!/usr/bin/env ts-node")
      eslint_files+=( "$file" )
      ;;
    "#!/usr/bin/env ruby")
      rubocop_files+=( "$file" )
      ;;
    *)
      echo "Unrecognized shebang '$shebang' in $file"
        (( errors+=1 ))
      ;;
  esac
done

# then actually run the linting on those files
if [ "${#shellcheck_files[@]}" -gt 0 ]
then
  if ! @wait-for-command shellcheck "${shellcheck_files[@]}"
  then
    (( errors+=1 ))
  fi
fi
if [ "${#eslint_files[@]}" -gt 0 ]
then
  if ! @wait-for-command yarn eslint "${eslint_files[@]}"
  then
    (( errors+=1 ))
  fi
fi
if [ "${#rubocop_files[@]}" -gt 0 ]
then
  if ! @wait-for-command rubocop "${rubocop_files[@]}"
  then
    (( errors+=1 ))
  fi
fi

if [ "$errors" -ne 0 ]
then
  echo ""
  echo "There were errors"
  exit 1
fi
