#!/usr/bin/env badash
# shellcheck shell=bash

# [git] Rebase current branch against main/master (Git Rebase Against Main/Master)

COLOR_FG_BOLD_BLUE='\033[1;34m'
COLOR_RESET='\033[0m'

current_git_branch ()
{
    git rev-parse --abbrev-ref HEAD
}
echo_info ()
{
    echo -e "${COLOR_FG_BOLD_BLUE}$*${COLOR_RESET}" 1>&2
}
gmt ()
{
    @wait-for-command git mergetool --tool=opendiff
}
in_git_repo ()
{
    git status > /dev/null && return 0 || @echo-err "Not in git repo" && return 1
}
no_uncommitted_changes ()
{
    [ "$(git status --porcelain --untracked-files=no)" != "" ] && @echo-err ">_<  You have uncommitted changes" && return 1 || return 0
}
not_on_git_branch ()
{
    [ "$(current_git_branch)" == "$1" ] && @echo-err ">_<  Doesn't work on branch '$1'" && return 1 || return 0
}

if in_git_repo && no_uncommitted_changes
then
  branch_name=$(current_git_branch)
  need_to_remove_orig_files='no'

  # is the default branch main or master?
  # see https://stackoverflow.com/q/5167957
  if git show-ref --verify --quiet refs/heads/main
  then
    default_branch="main"
  elif git show-ref --verify --quiet refs/heads/master
  then
    default_branch="master"
  else
    echo "Error: default branch is not 'main' or 'master'"
    exit 1
  fi

  if not_on_git_branch "$default_branch"
  then
    # update main/master
    @@SCRIPT_DIR@@/gc "$default_branch" && @@SCRIPT_DIR@@/gpr
    # shellcheck disable=SC2016
    @exit-on-error "Failed to pull and rebase $default_branch" 'gc "$branch_name"'

    @@SCRIPT_DIR@@/gc "$branch_name" && git rebase "$default_branch"
    # shellcheck disable=SC2181
    while [ "$?" -ne 0 ]; do
      @wait-for-keypress 'Press any key to continue... '
      need_to_remove_orig_files='yes'
      # TODO: if I fix conflicts so there have been no changes, need to do `git rebase --skip` here
      # (have to detect that from the output of `git rebase --continue`)
      gmt && git rebase --continue
      # TODO: how to detect that I should abort? change the "press a key" prompt?
    done

    # delete any *.orig files leftover from merge conflicts
    if [ "$need_to_remove_orig_files" == 'yes' ]; then
      echo_info "Cleaning up .orig files from merge conflicts..."
      @@SCRIPT_DIR@@/grmorig
    fi
  fi
fi
