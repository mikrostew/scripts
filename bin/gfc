#!/usr/bin/env badash
# shellcheck shell=bash

# [git] Fork a repo from github and clone locally (Git Fork & Clone)

# colors
COLOR_FG_BOLD_BLUE='\033[1;34m'
COLOR_FG_GREEN='\033[0;32m'
COLOR_RESET='\033[0m'

# imported functions
echo_ack ()
{
    echo -e "${COLOR_FG_GREEN}$*${COLOR_RESET}" 1>&2
}
echo_info ()
{
    echo -e "${COLOR_FG_BOLD_BLUE}$*${COLOR_RESET}" 1>&2
}
git_parse_repo_url ()
{
    repo_url="$1";
    if [[ "$repo_url" =~ ^git@ ]]; then
        trim_front="${repo_url#git@github.com:}";
        trim_back="${trim_front%.git}";
        echo "${trim_back/\// }";
    else
        if [[ "$repo_url" =~ ^https ]]; then
            trim_front="${repo_url#https://github.com/}";
            trim_back="${trim_front%.git}";
            echo "${trim_back/\// }";
        fi;
    fi
}
show_help_msg() {
  echo "gfc - [git] Fork a repo from github and clone locally (Git Fork & Clone)"
  echo 'Usage: gfc [options] repo_url'
  echo ''
  echo 'Options:'
  echo '  -h               Show this help message'
  echo ''
  echo 'Arguments:'
  echo '  repo_url         URL of the github repository to fork'
}

# args
while getopts ":h" opt
do
  case $opt in
    h)
      show_help_msg && exit 0
      ;;
    \?)
      @echo-err "$0: invalid option '-$OPTARG'"
      exit 1
      ;;
    :)
      @echo-err "$0: option '-$OPTARG' requires an argument"
      exit 1
      ;;
  esac
done
shift $((OPTIND-1))

# mandatory arg - URL of the github repository to fork
repo_url="${1:?Missing argument \'repo_url\'}"

@uses-cmds curl jq

my_username="mikrostew"

# will split into array because it's 2 strings separated by space
mapfile -t repo_info <<< "$(git_parse_repo_url "$repo_url")"

username=${repo_info[0]}
repo_name=${repo_info[1]}

# create fork from original repo

# get API token from the keychain (will have to input my password)
api_token="$(security find-generic-password -ga github-fork-token -w)"
if [ -z "$api_token" ]
then
  @echo-err "Unable to get the API token"
  exit 1
fi

# don't echo the API token to the screen
echo_ack "(curl -X POST -u '$my_username:XXXXX' 'https://api.github.com/repos/$username/$repo_name/forks')"
output="$(curl -X POST -u "$my_username:$api_token" "https://api.github.com/repos/$username/$repo_name/forks")"
# (Note that running that multiple times won't create multiple forks)
# shellcheck disable=SC2016
@exit-on-error 'API call to fork the repository failed' 'echo "JSON output: $output"'

# TODO - check 'output' for error

echo_info "Waiting 10 seconds for github to create the fork..."
sleep 10

# clone the repo locally (use the 'ssh_url' property from the returned JSON)
ssh_url="$(echo "$output" | jq --raw-output '.ssh_url')"
if [ "$ssh_url" == "null" ]
then
  @echo-err "Unable to get the 'ssh-url' property"
  echo "Output is:"
  echo "$output"
  exit 1
fi

# check for error, wait, and retry once if it failed
if ! @wait-for-command git clone "$ssh_url" "$repo_name"
then
  echo_info "Waiting 10 more seconds and retrying once..."
  sleep 10
  @wait-for-command git clone "$ssh_url" "$repo_name"
  # if it failed again then something is wrong
  # shellcheck disable=SC2016
  @exit-on-error 'Failed to clone the repository - check if https://github.com/$my_username/$repo_name exists'
fi

# cd into that folder && set upstream to the original repo
cd "$repo_name" && @wait-for-command git remote add upstream "$repo_url"
@wait-for-command --show-output git remote -v
