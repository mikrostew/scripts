#!/usr/bin/env badash
# shellcheck shell=bash

# [git] Merge current branch into default (Git Merge into Main)

current_git_branch ()
{
  git rev-parse --abbrev-ref HEAD
}
in_git_repo ()
{
  git status > /dev/null && return 0 || @echo-err "Not in git repo" && return 1
}
no_uncommitted_changes ()
{
  [ "$(git status --porcelain --untracked-files=no)" != "" ] && @echo-err ">_<  You have uncommitted changes" && return 1 || return 0
}
not_on_git_branch ()
{
  [ "$(current_git_branch)" == "$1" ] && @echo-err ">_<  Doesn't work on branch '$1'" && return 1 || return 0
}
show_help_msg() {
  echo "gmm - [git] Merge current branch into main (Git Merge into Main)"
  echo 'Usage: gmm [options]'
  echo ''
  echo 'Options:'
  echo '  -h               Show this help message'
}
while getopts ":h" opt
do
  case $opt in
    h)
      show_help_msg && exit 0
      ;;
    \?)
      @echo-err "$0: invalid option '-$OPTARG'"
      exit 1
      ;;
    :)
      @echo-err "$0: option '-$OPTARG' requires an argument"
      exit 1
      ;;
  esac
done
shift $((OPTIND-1))

if in_git_repo
then
  @git-default-branch default_branch
  # shellcheck disable=SC2154
  if not_on_git_branch "$default_branch" && no_uncommitted_changes
  then
    branch_name=$(current_git_branch)
    if @wait-for-command git checkout "$default_branch"
    then
      if @wait-for-command git merge "$branch_name"
      then
        echo "Merged into $default_branch branch"
        exit
      fi
    fi

    # error recovery to fix merge conflicts
    @echo-err "Dang it! merge failed - good luck"
    @wait-for-keypress "Press any key to start merge resolution... "
    @@SCRIPT-DIR@@/gmt
  fi
fi
