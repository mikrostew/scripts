#!/usr/bin/env badash
# shellcheck shell=bash

# [git] Delete git branch from list of branches (Git Branch Delete)

COLOR_FG_BOLD_BLUE='\033[1;34m'
COLOR_FG_GREEN='\033[0;32m'
COLOR_RESET='\033[0m'

all_git_branches() {
  @wait-for-command --show-output git for-each-ref --format="%(refname)" refs/heads/ | sed 's|refs/heads/||'
}
echo_info ()
{
    echo -e "${COLOR_FG_BOLD_BLUE}$*${COLOR_RESET}" 1>&2
}
in_git_repo ()
{
    git status > /dev/null && return 0 || @echo-err "Not in git repo" && return 1
}
show_help_msg() {
  echo "gbd "
  echo 'Usage: gbd [options]'
  echo ''
  echo 'Options:'
  echo '  -h               Show this help message'
}
while getopts ":h" opt
do
  case $opt in
    h)
      show_help_msg && exit 0
      ;;
    \?)
      @echo-err "$0: invalid option '-$OPTARG'"
      exit 1
      ;;
    :)
      @echo-err "$0: option '-$OPTARG' requires an argument"
      exit 1
      ;;
  esac
done
shift $((OPTIND-1))

@uses-cmds sed, git

if in_git_repo
then
  @git-default-branch default_branch

  # all branches, not including the default
  # shellcheck disable=SC2154
  all_branches="$(all_git_branches | sed "/^$default_branch$/d" | sort)"
  if [ -z "$all_branches" ]
  then
    echo_info "$default_branch is the only branch, nothing to delete"
    exit 0
  fi

  # all branches that have been merged (strip out leading asterisk and whitespace
  mapfile -t all_branches <<< "$all_branches"
  num_branches="${#all_branches[@]}"
  mapfile -t all_merged <<< "$(git branch --merged "$default_branch" | sed -e 's/^\* //' -e 's/^  //')"
  num_merged="${#all_merged[@]}"

  # construct an associative array to display if branches are merged
  declare -A merge_status
  for((i=0; i<num_merged; i++))
  do
    name="${all_merged[$i]}"
    # add color here
    merge_status[$name]="${COLOR_FG_GREEN}(merged)${COLOR_RESET}"
  done

  echo ""
  # display the branches and prompt for choice
  for((i=0; i<num_branches; i++))
  do
    branch_name="${all_branches[$i]}"
    # display a 1-based index, which is nicer to select
    echo -e "[$(( i + 1 ))] $branch_name ${merge_status[$branch_name]}"
  done
  echo ""
  echo -n "Branch to delete: "
  read -r branch_num
  echo ""

  # validate choice and try to delete
  if [ -n "$branch_num" ] && (( "$branch_num" <= "$num_branches" ))
  then
    (( branch_index = branch_num - 1 ))
    @wait-for-command git branch -d "${all_branches[$branch_index]}"
  else
    echo_info "no branch selected"
  fi
fi
