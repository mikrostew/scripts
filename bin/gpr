#!/usr/bin/env badash
# shellcheck shell=bash

# [git] Pull changes from origin and rebase local changes (Git Pull Rebase)

# colors
COLOR_FG_BOLD_YELLOW='\033[1;33m'
COLOR_RESET='\033[0m'

# helpers
current_git_branch () {
    git rev-parse --abbrev-ref HEAD
}

# TODO: this could be a badash thing
# show an animated prompt while waiting for input
prompt-for-input() {
  # arguments:
  # - prompt string
  # - variable to store user input
  prompt_str="$1"
  read_var_name="$2"

  local prompt_animation=( ">  "
                           " > "
                           "  >"
                           " > " )
  local num_frames=${#prompt_animation[@]}

  # echo the prompt
  printf "${prompt_animation[0]} $prompt_str "

  # start the animation running async, and get its PID
  (
    i=0
    while :
    do
      printf "\r${prompt_animation[$i]} $prompt_str " >&2
      sleep 0.2
      i=$(( (i + 1) % num_frames ))
    done
  ) & disown
  local animation_pid="$!"

  # kill the animation process for Ctrl-C, cleanup, and return failure
  trap "kill $animation_pid && echo "" && return 1" INT TERM

  # read input from the user
  read -r "$read_var_name"

  # clear the trap, and stop the spinner
  trap - INT TERM
  kill "$animation_pid"

  return 0
}


branch_name=$(current_git_branch)

# sometimes `git pull --rebase` fails with "fatal: Cannot rebase onto multiple branches."
# could try doing the full command (from https://stackoverflow.com/a/35844073)
# git pull origin "$branch_name" --rebase
# but sometimes that also fails,
# so be more explicit and split it into 2 commands (adapted from https://stackoverflow.com/a/35844073)
# (also prunes, which is a nice benefit)
@wait-for-command git fetch --all --prune

# if there are local changes, rebase will fail
# so prompt to stash those first
uncommitted_changes="$(git status --porcelain --untracked-files=no)"
if [ "$uncommitted_changes" != "" ]
then
  echo ""
  echo "You have uncommitted changes:"
  echo -e "${COLOR_FG_BOLD_YELLOW}$uncommitted_changes${COLOR_RESET}"
  echo ""
  prompt-for-input "Want to stash-rebase-pop? [y/N]" stash_confirm
  if [ "$stash_confirm" == "Y" ] || [ "$stash_confirm" == "y" ]
  then
    should_stash="y"
  else
    echo "(not stashing, maybe you should commit...)"
    exit 1
  fi
fi

if [ "$should_stash" = "y" ]
then
  @wait-for-command git stash
fi

@wait-for-command git rebase "origin/$branch_name"
@exit-on-error 'failed to rebase'

if [ "$should_stash" = "y" ]
then
  @wait-for-command git stash pop
fi
