#!/usr/bin/env badash
# shellcheck shell=bash

# [git] Merge main/master into current branch (Git Merge Main into Branch)

COLOR_FG_BOLD_BLUE='\033[1;34m'
COLOR_RESET='\033[0m'

current_git_branch ()
{
    git rev-parse --abbrev-ref HEAD
}
echo_info ()
{
    echo -e "${COLOR_FG_BOLD_BLUE}$*${COLOR_RESET}" 1>&2
}
in_git_repo ()
{
    git status > /dev/null && return 0 || @echo-err "Not in git repo" && return 1
}
no_uncommitted_changes ()
{
    [ "$(git status --porcelain --untracked-files=no)" != "" ] && @echo-err ">_<  You have uncommitted changes" && return 1 || return 0
}
not_on_git_branch ()
{
    [ "$(current_git_branch)" == "$1" ] && @echo-err ">_<  Doesn't work on branch '$1'" && return 1 || return 0
}

if in_git_repo && no_uncommitted_changes
then
  # what is the default branch?
  @git-default-branch default_branch

  # shellcheck disable=SC2154
  if not_on_git_branch "$default_branch"
  then

    starting_branch="$(current_git_branch)"

    # try to update main branch and get back to the starting branch
    @@SCRIPT-DIR@@/gcm && mint update && @@SCRIPT-DIR@@/gc "$current_git_branch"
    @exit-on-error 'Error updating main branch and getting back to current branch'

    # merge the updated commits from local main/master
    if ! @wait-for-command git merge "$default_branch"
    then
      echo_info "Merge failed"
      @wait-for-keypress 'Press any key to start resolving conflicts (or Ctrl-C to abort)... '
      gmt

      echo "To remove *.orig files leftover from conflicts, run 'grmorig'"
    fi
  else
    @echo-err "Already on default branch '$default_branch'"
  fi
fi
