#!/usr/bin/env bash
# squash commits, rebase, merge, and submit, for LI workflow

# TODO - blurb about how to use this

@import { echo_err, echo_ack, echo_info, echo_fail_banner, echo_success_banner, do_cmd } from .bash_shared_functions

@import { do_git, current_git_branch, git_review_board_id, git_undo_merge, gmt, gpr, in_git_repo, no_uncommitted_changes, not_on_git_branch, squash_branch, get_li_rb_title } from .bash_git

@uses_cmds jq

in_mint_submit_repo() {
  if [ -f "$PWD/product-spec.json" ]; then
    # test if there is something defined for 'mint submit'
    submit_def="$(cat $PWD/product-spec.json | jq '.build.commands.submit')"
    [ "$submit_def" != 'null' ]
    return
  else
    # product-spec.json does not exist
    return
  fi
}

show_usage() {
  echo_err "Usage:"
  echo_err "  ${0##*/} <commit-msg> [, <commit-msg-extra-line>]"
}

# arguments
input_msg="$1"
input_msg_extra_line="$2" # optional

branch_name="$(current_git_branch)"

review_id="$(git_review_board_id $branch_name)"
if [ "$?" -ne 0 ]; then
  echo_err "Dang it! Getting the review board ID failed"
  exit 1
fi
echo_info "Submitting RB $review_id"

review_title="$(get_li_rb_title $review_id)"
if [ -z "$input_msg" ]
then
  # use the title from the RB
  input_msg="$review_title"
fi

# prompt for things
echo -n "Commit message [$input_msg]: "
read commit_msg
if [ -z "$commit_msg" ]; then commit_msg="$input_msg"; fi

echo "Commit message 2nd line, for overrides"
echo "These should only be used by oncall, or for immediate response situations:"
echo "  ACLOVERRIDE           - cannot get an ACL owner to ship within your SLA"
echo "  PCVALIDATIONOVERRIDE  - unblock trunk with a non-functional change (fixing ACL, extending whitelist)"
echo "  LIXOVERDUEOVERRIDE    - if precommit is being blocked by an overdue lix"
echo "  DISABLEDTESTOVERRIDE  - bypass enforcement of disabled tests per pillar"
echo "  I18NOVERRIDE          - bypass i18n validation in precommit"
echo "  PCLOVERRIDE           - fix compatibility test that is failing in PCL"
echo "  EOLVALIDATIONOVERRIDE - commit is blocked by out of date dependency"
echo "  TRUNKBLOCKERFIX       - override trunk lock"
echo "  CHERRYPICKOVERRIDE    - commit a change to hotfix branch but not master"
echo -n "[$input_msg_extra_line]: "
read commit_msg_extra_line
if [ -z "$commit_msg_extra_line" ]; then commit_msg_extra_line="$input_msg_extra_line"; fi


if in_git_repo && not_on_git_branch 'master' && no_uncommitted_changes
then
  # squash changes on this branch
  squash_branch "$commit_msg" "$commit_msg_extra_line"
  if [ "$?" -ne 0 ]; then
    echo_err "Dang it! squashing failed (TODO: auto recovery here?)"
    exit 1
  fi

  # rebase against master
  do_git pull --rebase origin master && do_git checkout master && do_git pull --rebase
  while [ "$?" -ne 0 ]; do
    read -p "Press any key to continue... " -n1 -s # DEBUG
    gmt && do_git rebase --continue
    # TODO: how to detect that I should abort?
  done

  # merge into master
  do_git merge "$branch_name"
  if [ "$?" -ne 0 ]; then
    echo_err "Dang it! merge failed - good luck"
    gmt
    read -p "Press any key to continue... " -n1 -s # DEBUG
  fi

  # apply the RB to the commit
  # if this fails, means I don't have the necessary ACLs (for git submit repos)
  do_git review dcommit -r "$review_id"
  if [ "$?" -ne 0 ]; then
    # dcommit failed, probably missing a shipit from ACL
    echo_err "Dang it! 'git review dcommit' failed, undoing the merge"
    git_undo_merge "$branch_name"
    exit 1
  fi

  # check product-spec.json for 'mint submit'
  if in_mint_submit_repo; then
    echo_info "supports mint submit? YES"
    # mint submit
    do_cmd mint submit
    if [ "$?" -ne 0 ];then
      echo_fail_banner
    else
      echo_success_banner
    fi
    # mint submit is async, so for now undo the merge in case I have to resubmit
    echo_info "Undoing the merge so I can keep working..."
    git_undo_merge "$branch_name"
  else
    echo_info "supports mint submit? NO"
    # git submit
    do_git submit
    if [ "$?" -ne 0 ]; then
      # submit failed, could be precommit, or ACL check, or whatever
      echo_fail_banner
      echo_info "Undoing the merge..."
      git_undo_merge "$branch_name"
      exit 1
    fi
    echo_success_banner
    echo_info "Pulling changes into master..."
    # rebase to pick up the change
    gpr
    # and done!
  fi
fi
