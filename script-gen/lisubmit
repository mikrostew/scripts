#!/usr/bin/env bash
# Squash commits, rebase, merge, and submit, for LI workflow

@arg 'commit_msg' 'Message for the commit'
@arg_optional 'commit_msg_extra_line' 'Optional extra line for more details and/or overrides'

@import { echo_info, echo_fail_banner, echo_success_banner, do_cmd } from .bash_shared_functions

@import { do_git, current_git_branch, git_review_board_id, git_undo_merge, gpr, in_git_repo, no_uncommitted_changes, not_on_git_branch, squash_branch, get_li_rb_title } from .bash_git

@uses_cmds jq gram gmm

in_mint_submit_repo() {
  if [ -f "$PWD/product-spec.json" ]; then
    # test if there is something defined for 'mint submit'
    submit_def="$(cat $PWD/product-spec.json | jq '.build.commands.submit')"
    [ "$submit_def" != 'null' ]
    return
  else
    # product-spec.json does not exist
    return
  fi
}

branch_name="$(current_git_branch)"

review_id="$(git_review_board_id $branch_name)"
@EXIT_IF_CMD_ERROR "Dang it! Getting the review board ID failed"

echo_info "Submitting RB $review_id"

review_title="$(get_li_rb_title $review_id)"
if [ -z "$commit_msg" ]
then
  # use the title from the RB
  commit_msg="$review_title"
fi

# prompt for things
echo -n "Commit message [$commit_msg]: "
read commit_msg
if [ -z "$commit_msg" ]; then commit_msg="$commit_msg"; fi

echo "Commit message 2nd line, for overrides"
echo "These should only be used by oncall, or for immediate response situations:"
echo "  ACLOVERRIDE           - cannot get an ACL owner to ship within your SLA"
echo "  PCVALIDATIONOVERRIDE  - unblock trunk with a non-functional change (fixing ACL, extending whitelist)"
echo "  LIXOVERDUEOVERRIDE    - if precommit is being blocked by an overdue lix"
echo "  DISABLEDTESTOVERRIDE  - bypass enforcement of disabled tests per pillar"
echo "  I18NOVERRIDE          - bypass i18n validation in precommit"
echo "  PCLOVERRIDE           - fix compatibility test that is failing in PCL"
echo "  EOLVALIDATIONOVERRIDE - commit is blocked by out of date dependency"
echo "  TRUNKBLOCKERFIX       - override trunk lock"
echo "  CHERRYPICKOVERRIDE    - commit a change to hotfix branch but not master"
echo -n "[$commit_msg_extra_line]: "
read commit_msg_extra
if [ -n "$commit_msg_extra" ]; then commit_msg_extra_line="$commit_msg_extra"; fi


if in_git_repo && not_on_git_branch 'master' && no_uncommitted_changes
then
  # squash changes on this branch
  squash_branch "$commit_msg" "$commit_msg_extra_line"
  @EXIT_IF_CMD_ERROR "Dang it! squashing failed (TODO: auto recovery here?)"

  # rebase current branch against master
  gram
  @EXIT_IF_CMD_ERROR "Failed to rebase against master"

  # merge into master
  gmm
  @EXIT_IF_CMD_ERROR "Merge into master failed - good luck"

  # apply the RB to the commit
  # if this fails, means I don't have the necessary ACLs (for git submit repos)
  do_git review dcommit -r "$review_id"
  # if dcommit failed, probably missing a shipit from ACL
  @EXIT_IF_CMD_ERROR "Dang it! 'git review dcommit' failed, undoing the merge" 'git_undo_merge "$branch_name"'

  # check product-spec.json for 'mint submit'
  if in_mint_submit_repo; then
    echo_info "supports mint submit? YES"
    # mint submit
    do_cmd mint submit
    if [ "$?" -ne 0 ];then
      echo_fail_banner
    else
      echo_success_banner
    fi
    # mint submit is async, so for now undo the merge in case I have to resubmit
    echo_info "Undoing the merge so I can keep working..."
    git_undo_merge "$branch_name"
  else
    echo_info "supports mint submit? NO"
    # git submit
    do_git submit
    if [ "$?" -ne 0 ]; then
      # submit failed, could be precommit, or ACL check, or whatever
      echo_fail_banner
      echo_info "Undoing the merge..."
      git_undo_merge "$branch_name"
      exit 1
    fi
    echo_success_banner
    echo_info "Pulling changes into master..."
    # rebase to pick up the change
    gpr
    # and done!
  fi
fi
