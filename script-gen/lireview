#!/usr/bin/env bash
# Create a new RB from the local changes, or update existing review

@arg_optional 'input_description' 'Description of the changes'

@import { echo_info } from .bash_shared_functions
@import { do_git, git_review_board_id, current_git_branch } from .bash_git

@uses_cmds jq git

# SETTINGS
ADDITIONAL_USERS_GROUPS="flagship-productivity-reviewers"  # (comma-delimited)

branch_name=$(current_git_branch)
review_id="$(git_review_board_id $branch_name)"

# check if there is already a RB for this branch
if [ -n "$review_id" ]
then
  # update

  # this doesn't covery platform-review
  # see go/voyager/web/platform-review for details of that command

  echo_info "RB $review_id already exists for this branch - updating..."
  # if there is an argument supplied, use that for the description
  echo -n "Description of these changes [$input_description]: "
  read diff_description
  if [ -z "$diff_description" ]
  then
    diff_description="$input_description"
  fi
  do_git review update --open --diff-description "$diff_description"
  # use `git review update --help` to figure out how to add other options
else
  # create

  echo_info "No RB for this branch - creating one..."
  # if there is an argument supplied, use that for the description
  if [ -z "$input_description" ]
  then
    # no input description, so use the commit message
    input_description="$(git log -1 --pretty=%B)"
  fi
  echo -n "Description of these changes [$input_description]: "
  read rb_description
  if [ -z "$rb_description" ]
  then
    rb_description="$input_description"
  fi

  # previously this was using expect, but sometimes I have to login, and it hangs
  do_git review create --owners-only --open --description "$rb_description"

  # use `git review create --help` to figure out how to add other options
fi

