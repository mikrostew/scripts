#!/usr/bin/env bash
# [git] Delete git branch from list of branches (Git Branch Delete)

@import { all_git_branches, in_git_repo, do_git } from .bash_git
@import { echo_info } from .bash_shared_functions
@import_var { COLOR_FG_GREEN, COLOR_RESET } from .bash_colors

@uses-cmds sed, git

if in_git_repo
then
  # all branches, not including master
  all_branches=( $(all_git_branches | sed '/^master$/d' | sort) )
  num_branches="${#all_branches[@]}"
  if [ "$num_branches" -eq 0 ]
  then
    echo_info "master is the only branch, nothing to delete"
    exit 0
  fi

  # all branches that have been merged (strip out leading asterisk and whitespace
  all_merged=( $(git branch --merged master | sed -e 's/^\* //' -e 's/^  //') )
  num_merged="${#all_merged[@]}"

  # construct an associative array to display if branches are merged
  declare -A merge_status
  for((i=0; i<$num_merged; i++))
  do
    name="${all_merged[$i]}"
    # add color here
    merge_status[$name]="${COLOR_FG_GREEN}(merged)${COLOR_RESET}"
  done

  # display the branches and prompt for choice
  for((i=0; i<$num_branches; i++))
  do
    branch_name="${all_branches[$i]}"
    # display a 1-based index, which is nicer to select
    echo -e "[$(( i + 1 ))] $branch_name ${merge_status[$branch_name]}"
  done
  echo -n "Branch to delete: "
  read branch_num
  echo ""

  # validate choice and try to delete
  if [ -n "$branch_num" ] && (( "$branch_num" <= "$num_branches" ))
  then
    (( branch_index = branch_num - 1 ))
    do_git branch -d "${all_branches[$branch_index]}"
  else
    echo_info "no branch selected"
  fi
fi

