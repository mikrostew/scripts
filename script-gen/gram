#!/usr/bin/env bash
# [git] Rebase current branch against master (Git Rebase Against Master)

@import { in_git_repo, not_on_git_branch, no_uncommitted_changes, current_git_branch, do_git, gmt, grmorig } from .bash_git
@import { echo_info } from .bash_shared_functions

@uses_cmds gpr

if in_git_repo && not_on_git_branch 'master' && no_uncommitted_changes
then
  branch_name=$(current_git_branch)
  need_to_remove_orig_files='no'

  do_git checkout master && gpr
  @exit_on_error "Failed to pull and rebase master" 'do_git checkout "$branch_name"'

  do_git checkout "$branch_name" && do_git rebase master
  while [ "$?" -ne 0 ]; do
    @WAIT_FOR_KEYPRESS 'Press any key to continue... '
    need_to_remove_orig_files='yes'
    # TODO: if I fix conflicts so there have been no changes, need to do `git rebase --skip` here
    # (have to detect that from the output of `git rebase --continue`)
    gmt && do_git rebase --continue
    # TODO: how to detect that I should abort?
  done

  # delete any *.orig files leftover from merge conflicts
  if [ "$need_to_remove_orig_files" == 'yes' ]; then
    echo_info "Cleaning up .orig files from merge conflicts..."
    grmorig
  fi
fi

