#!/usr/bin/env bash
# [git] Fork a repo from github and clone locally (Git Fork & Clone)

@arg 'repo_url' 'URL of the github repository to fork'

@import { git_parse_repo_url, do_git } from .bash_git
@import { echo_ack, echo_info } from .bash_shared_functions

@uses_cmds curl jq

my_username="mikrostew"

# will split into array because it's 2 strings separated by space
repo_info=( $(git_parse_repo_url $repo_url) )
username=${repo_info[0]}
repo_name=${repo_info[1]}

# create fork from original repo
api_token="$($HOME/Dropbox/secret/get-api-token github-fork-token)"
# not using do_cmd here because I don't want the API token echoed to the screen
echo_ack "(curl -X POST -u '$my_username:XXXXX' 'https://api.github.com/repos/$username/$repo_name/forks')"
output="$(curl -X POST -u "$my_username:$api_token" "https://api.github.com/repos/$username/$repo_name/forks")"
# (Note that running that multiple times won't create multiple forks)
@EXIT_IF_CMD_ERROR 'API call to fork the repository failed' 'echo "JSON output: $output"'

# TODO - check 'output' for error

echo_info "Waiting 10 seconds for github to create the fork..."
sleep 10

# clone the repo locally (use the 'ssh_url' property from the returned JSON)
ssh_url="$(echo $output | jq --raw-output '.ssh_url')"
do_git clone "$ssh_url" "$repo_name"
# check for error, wait, and retry once if it failed
if [ "$?" -ne 0 ]
then
  echo_info "Waiting 10 more seconds and retrying once..."
  sleep 10
  do_git clone "$ssh_url" "$repo_name"
  # if it failed again then something is wrong
  @EXIT_IF_CMD_ERROR 'Failed to clone the repository - check if https://github.com/$my_username/$repo_name exists'
fi

# cd into that folder && set upstream to the original repo
cd "$repo_name" && do_git remote add upstream "$repo_url"
do_git remote -v

