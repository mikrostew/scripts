#!/usr/bin/env bash
# Check minimum version, and print out the result

@arg 'executable_name' 'Executable that is being checked'
@arg 'version_specifier' 'Semver range to match against'
@arg 'version_cmd' 'How to get the version of the executable (NOTE: will be eval-ed)'
@arg 'install_cmd' 'Command the user can run to install the executable'
@arg_optional 'install_path' 'Path to the executable to use instead of `which` (NOTE: will be eval-ed)'

@import_var { COLOR_FG_RED, COLOR_RESET } from .bash_colors

# TODO: re-install semver somehow
#@uses_cmds semver

# convert versions to X.X.X format
normalize_version() {
  if [[ "$1" =~ ^[0-9]+$ ]]; then
    echo "$1.0.0"
  elif [[ "$1" =~ ^[0-9]+\.[0-9]+$ ]]; then
    echo "$1.0"
  elif [[ "$1" =~ ^[0-9]+\.[0-9]+\.[0-9]+ ]]; then
    # there may be some junk after the version (looking at you bash), get rid of that
    echo "$BASH_REMATCH"
  else
    echo "$1"
  fi
}

# compare input semver with input constraint
# (using semver from NPM for this - https://github.com/npm/node-semver)
# $1 - program version (semver format)
# $2 - version range (semver format)
meets_version() {
  semver --range "$2" "$1" >/dev/null
}

# check if this is installed
if [ -n "$install_path" ]; then
  install_path=$(eval "$install_path")
else
  install_path=$(which "$executable_name")
fi
if [ -z "$install_path" ]; then
  echo -e "$executable_name : ${COLOR_FG_RED}not installed (want $version_specifier), install with '${install_cmd:-(unknown command)}'${COLOR_RESET}"
  exit 1
fi
# check the minimum version
# TODO: re-enable this
# current_version=$(eval "$version_cmd")
# if [ -n "$current_version" ]; then
#   if meets_version "$(normalize_version $current_version)" "$version_specifier"; then
#     # don't print anything for this
#     exit 0
#   else
#     echo -e "$executable_name : ${COLOR_FG_RED}found $current_version (want $version_specifier)${COLOR_RESET} ($install_path)"
#   fi
# else
#   echo -e "$executable_name : ${COLOR_FG_RED}unknown version (want $version_specifier)${COLOR_RESET} ($install_path)"
# fi
# exit 1 # if it hasn't already exited, it didn't meet the version
exit 0

